'use strict';
Events.on('mapsloaded', function () {
  
  function Tooltip(options) {
    
    this.object = null;
    if (options.poly) {
      this.object = options.poly;
    }
    else if (options.marker) {
      this.object   = options.marker;
    }
    else {
      console.warn('Wrong arguments');
      console.trace();
      return false;
    }
    
    this.content_  = options.content;
    this.map_      = options.map || this.object.get('map');
    this.cssClass_ = options.cssClass || null;
    
    this.div_ = null;
    
    this.setMap(this.map_);
    var me = this;
  
    
      google.maps.event.addListener(me.object, 'mouseover', function (e) {
        if (me.draw(e.latLng))
          me.show();
      });
      
      google.maps.event.addListener(me.object, 'mouseout', function () {
        me.hide();
      });
     
  }
  
  
  Tooltip.prototype = new google.maps.OverlayView();
  
  Tooltip.prototype.onAdd = function () {
    var div              = document.createElement('DIV');
    div.style.position   = "absolute";
    div.style.visibility = "hidden";
    if (this.cssClass_)
      div.className += " " + this.cssClass_;
    
    div.innerHTML = this.content_;
    
    this.div_ = div;
    
    var panes = this.getPanes();
    
    panes.floatPane.appendChild(this.div_);
  }
  
  Tooltip.prototype.draw = function (position) {
    
    if (typeof position === 'undefined') {
      return false
    }
    
    var point = this.getProjection().fromLatLngToDivPixel(position);
    
    var div        = this.div_;
    div.style.left = (+point.x + 20) + 'px';
    div.style.top  = (+point.y - 40) + 'px';
    
    div.style.zIndex = 12;
    
    return true;
  }
  
  Tooltip.prototype.onRemove   = function () {
    this.div_.parentNode.removeChild(this.div_);
  }
  Tooltip.prototype.hide       = function () {
    if (this.div_) {
      this.div_.style.visibility = "hidden";
    }
  }
  Tooltip.prototype.show       = function () {
    if (this.div_) {
      this.div_.style.visibility = "visible";
    }
  }
  Tooltip.prototype.setContent = function (content) {
    this.content_       = content;
    this.div_.innerHTML = this.content_;
  }
  
  Tooltip.prototype.project = function (latLng) {
    var point = this.getProjection().fromLatLngToContainerPixel(latLng);
    
    return new google.maps.Point(
        Math.floor(point.x),
        Math.floor(point.y)
    );
  }
  window['Tooltip']         = Tooltip;
});