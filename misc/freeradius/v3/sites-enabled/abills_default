
server default {
listen {
	type = auth
	ipaddr = *
	port = 0
#	interface = eth0
#	clients = per_socket_clients

	limit {
	      max_connections = 16
	      lifetime = 0
	      idle_timeout = 30
	}
}

#
#  This second "listen" section is for listening on the accounting
#  port, too.
#
listen {
	ipaddr = *
#	ipv6addr = ::
	port = 0
	type = acct
#	interface = eth0
#	clients = per_socket_clients

	limit {
		#  The number of packets received can be rate limited via the
		#  "max_pps" configuration item.  When it is set, the server
		#  tracks the total number of packets received in the previous
		#  second.  If the count is greater than "max_pps", then the
		#  new packet is silently discarded.  This helps the server
		#  deal with overload situations.
		#
		#  The packets/s counter is tracked in a sliding window.  This
		#  means that the pps calculation is done for the second
		#  before the current packet was received.  NOT for the current
		#  wall-clock second, and NOT for the previous wall-clock second.
		#
		#  Useful values are 0 (no limit), or 100 to 10000.
		#  Values lower than 100 will likely cause the server to ignore
		#  normal traffic.  Few systems are capable of handling more than
		#  10K packets/s.
		#
		#  It is most useful for accounting systems.  Set it to 50%
		#  more than the normal accounting load, and you can be sure that
		#  the server will never get overloaded
		#
#		max_pps = 0

		# Only for "proto = tcp". These are ignored for "udp" sockets.
		#
#		idle_timeout = 0
#		lifetime = 0
#		max_connections = 0
	}
}

# IPv6 versions of the above - read their full config to understand options
listen {
	type = auth
	ipv6addr = ::	# any.  ::1 == localhost
	port = 0
#	interface = eth0
#	clients = per_socket_clients
	limit {
	      max_connections = 16
	      lifetime = 0
	      idle_timeout = 30
	}
}

listen {
	ipv6addr = ::
	port = 0
	type = acct
#	interface = eth0
#	clients = per_socket_clients

	limit {
#		max_pps = 0
#		idle_timeout = 0
#		lifetime = 0
#		max_connections = 0
	}
}

authorize {
	preprocess
	mschap
	files
	perl
#Realm add
#if(User-Name =~ /^0026.*$/) {
#        update control {
#                Proxy-To-Realm := rad1
#        }
#        update request {
#                Realm := 'rad1'
#        }
#}
}

#  Authentication.
authenticate {
	Auth-Type PAP {
		pap
	}

	Auth-Type MS-CHAP {
		mschap
	}

	#mschap
	#digest
	eap
    Auth-Type Perl {
        perl
    }
}

#  Pre-accounting.  Decide which accounting type to use.
#
preacct {
	preprocess
}

accounting {
	perl

#Realm add
#if(User-Name =~ /^0026.*$/) {
#        update control {
#                Proxy-To-Realm := rad1
#        }
#        update request {
#                Realm := 'rad1'
#        }
#}


}

#  Post-Authentication
post-auth {
	perl
	Post-Auth-Type REJECT {
		perl
	}
}

}
