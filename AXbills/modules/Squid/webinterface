=head1 NAME

  Squid monitor

=cut

use strict;
use warnings FATAL => 'all';

our (%lang);
our AXbills::HTML $html;
use AXbills::Nas::Control;
use AXbills::Base qw(encode_base64 int2byte sec2time);
use Socket;


#*******************************************************************
=head2  squid_monitor()

=cut
#*******************************************************************
sub squid_monitor {

  my %sessions = ();

  $conf{SQUID_HOST} = $FORM{SQUID_HOST} if ($FORM{SQUID_HOST});
  $conf{SQUID_PORT} = $FORM{SQUID_PORT} if ($FORM{SQUID_PORT});
  $conf{SQUID_CACHEMGR_PASSWD} = $FORM{SQUID_CACHEMGR_PASSWD} if ($FORM{SQUID_CACHEMGR_PASSWD});
  $conf{SQUID_RESOLVIP} = 1 if ($FORM{SQUID_RESOLVIP});

  my $table = $html->table({
    width       => '100%',
    title_plain =>
      [
        "HOST: " . $html->form_input('SQUID_HOST', $conf{SQUID_HOST} || ''),
        "PORT: " . $html->form_input('SQUID_PORT', $conf{SQUID_PORT} || '', { SIZE => 5 }),
        "$lang{PASSWD}: " . $html->form_input('SQUID_CACHEMGR_PASSWD', "", { TYPE => 'PASSWORD' }),
        "RESOLV IP: " . $html->form_input('SQUID_RESOLVIP', "1",
          {
            TYPE => 'CHECKBOX', STATE => ($FORM{SQUID_RESOLVIP}) ? 1 : undef }),
        "$lang{REFRESH} (sec): " . $html->form_input('REFRESH', int($FORM{REFRESH} || 30), { SIZE => 4 }),
        $html->form_input('SHOW', $lang{SHOW}, { TYPE => 'SUBMIT' })
      ],
  });

  print $html->form_main({
    CONTENT => $table->show(),
    HIDDEN  => { index => "$index" },
    METHOD  => 'GET'
  });

  if (!$conf{SQUID_HOST}) {
    return 0;
  }

  my $server_info = '';
  my @commands = ("-\tGET cache_object://localhost/active_requests HTTP/1.0\r\n");
  $commands[0] .= "Authorization: Basic " . encode_base64("cachemgr:$conf{SQUID_CACHEMGR_PASSWD}") if ($conf{SQUID_CACHEMGR_PASSWD});
  $commands[0] .= "\r\n";

  my $total_sessions = 0;
  my $total_users = 0;

  if ($FORM{DEBUG}) {
    print join('//', @commands);
  }

  my $result = telnet_cmd2("$conf{SQUID_HOST}:$conf{SQUID_PORT}", \@commands);

  my @rows = split(/\n\n/, $result || q{});

  if ($rows[0] && $rows[0] !~ /HTTP\/1.0 200 OK/) {
    my ($header, undef) = split(/\r\n\r\n/, $rows[0]);
    $html->message('err', $lang{ERROR}, "Can't Connect '$conf{SQUID_HOST}:$conf{SQUID_PORT}'".
      $html->pre($header));
  }
  else {
    foreach my $client (@rows) {
      next if ($client =~ /cache_object\:\/\//);
      my @client_infO_array = split(/\n/, $client);

      my %info_hash = ();
      foreach my $line (@client_infO_array) {
        my ($l, $r) = split(/ /, $line, 2);
        $l =~ tr/ |\t//d;
        $info_hash{$l} = $r;
      }

      my ($addr, $port) = split(/:/, $info_hash{"peer:"});
      my $connection_id = $info_hash{'Connection:'};

      $server_info = $info_hash{'Server:'} if ($info_hash{'Server:'});

      $info_hash{'out.offset'} =~ /(\d+), out.size (\d+)/;

      $sessions{$addr}{$connection_id}{Size} = $2;
      $sessions{$addr}{$connection_id}{Url} = $info_hash{"uri"};

      $info_hash{'start'} =~ /(\d+)\.(\d+) \((\d+)\.(\d+) seconds ago\)/;
      $sessions{$addr}{$connection_id}{Start} = $3;
    }
  }

  $table = $html->table({
    width   => '100%',
    caption => "$conf{SQUID_HOST}:$conf{SQUID_PORT} ($server_info)",
    border  => 1,
    title   => [ "IP", "URL", $lang{SIZE}, $lang{TIME}, "-" ],
    qs      => $pages_qs
  });

  my $user_info;
  #if ($conf{SQUID_IP_USERS}) {
  #  require Dv_Sessions;
  #  Dv_Sessions->import();
  #  my $sessions = $sessions->new($db, $admin, \%conf);
  #  $user_info = " ()";
  #}

  while (my ($ip, $v) = each %sessions) {
    $ip = gethostbyaddr(inet_aton($ip), AF_INET) || $ip if ($conf{SQUID_RESOLVIP});

    $table->addtd($table->td($html->b($ip) . " $user_info", { bgcolor => $_COLORS[3] }),
      $table->td('', { colspan => 4, bgcolor => $_COLORS[3] }));
    $total_users++;

    while (my ($session_id, $v2) = each %{$v}) {
      $table->addrow('',
        ($v2->{Url} !~ /:443/) ? $html->button(
          substr($v2->{Url}, 0, 50), "",
          { GLOBAL_URL => "$v2->{Url}", ex_params => "TARGET=\"A$ip\"" }) : $v2->{Url},
        int2byte($v2->{Size}),
        sec2time($v2->{Start}, { str => 1 }),
        ''
      );
      $total_sessions++;
    }
  }

  print $table->show();

  $table = $html->table({
    width    => '100%',
    rowcolor => $_COLORS[3],
    rows     => [ [ "$lang{TOTAL}:", "$lang{USERS}:", "$total_users", "$lang{SESSIONS}:", "$total_sessions" ] ]
  });

  print $table->show();

  return 1;
}


1

