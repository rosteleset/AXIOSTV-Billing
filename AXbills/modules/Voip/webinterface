#!perl
=head1 NAME

  Voip web functions

  h323-disconnect-cause for CISCO of Radius Server
  In case of CISCO router, from the Radius server h323-disconnect-cause with code is returned. Like h323-disconnect-cause=4 or h323-disconnect-cause=7.
  In the following mini dictionary disconnect cause along description corresponding code is shown which will help instantly to identify disconnect issue if we find any code.

           Local-Clear                    0
           Local-No-Accept                1
           Local-Decline                  2
           Remote-Clear                   3
           Remote-Refuse                  4
           Remote-No-Answer               5
           Remote-Caller-Abort            6
           Transport-Error                7
           Transport-Connect-Fail         8
           Gatekeeper-Clear               9
           Fail-No-User                   10
           Fail-No-Bandwidth              11
           No-Common-Capabilities         12
           FACILITY-Forward               13
           Fail-Security-Check            14
           Local-Busy                     15
           Local-Congestion               16
           Remote-Busy                    17
           Remote-Congestion              18
           Remote-Unreachable             19
           Remote-No-Endpoint             20
           Remote-Off-Line                21
           Remote-Temporary-Error         22


  ERROR ID: 11xx

=cut

use strict;
use warnings FATAL => 'all';

use Voip;
use Voip_Sessions;
use Voip::Users;
use Voip::Constants qw/ACCT_TERMINATE_CAUSES/;
use Nas;
use Log;
use Tariffs;
use AXbills::Base qw(in_array sendmail sec2time show_log int2byte cmd next_month days_in_month dirname);

our (
  $db,
  $admin,
  %conf,
  %lang,
  %ADMIN_REPORT,
  @status,
  %permissions,
  @bool_vals,
  @_COLORS,
  @PERIODS,
  @MONTHES,
  @WEEKDAYS,
  $base_dir
);

our AXbills::HTML $html;
our $Voip = Voip->new($db, $admin, \%conf);
my $Sessions = Voip_Sessions->new($db, $admin, \%conf);
my $Tariffs = Tariffs->new($db, \%conf, $admin);
my $Nas = Nas->new($db, \%conf, $admin);
my $Voip_users = Voip::Users->new($db, $admin, \%conf, {
  html        => $html,
  lang        => \%lang,
  permissions => \%permissions
});

my @service_status_colors = ($_COLORS[9], $_COLORS[6], '#808080', '#0000FF', '#FF8000', '#009999');

$conf{VOIP_ASTERISK_USERS} = '' if (!$conf{VOIP_ASTERISK_USERS});

require Voip::User_portal;

if ($conf{VOIP_YATE}) {
  require Voip::Yate;
}

if ($permissions{4}) {
  require Voip::Configure;
}
if ($permissions{3}) {
  require Voip::Reports;
}

if (%ADMIN_REPORT) {
  require Voip::Periodic;
}

#*******************************************************************
=head2 voip_user_del($uid) - Delete user from module

=cut
#*******************************************************************
sub voip_user_del {
  my ($uid, $attr) = @_;

  $Voip->{UID} = $uid;
  $Voip->user_del({ UID => $uid, COMMENTS => $attr->{COMMENTS} });

  return 0;
}

#*******************************************************************
=head2 form_chg_tp() Change user variant form

=cut
#*******************************************************************
sub voip_chg_tp {
  my ($attr) = @_;

  my $res_val = $Voip_users->voip_user_preprocess($attr, { ADMIN_RIGHTS_CHECK => 1 });

  if ($res_val->{errno}) {
    print $res_val->{element} if ($res_val->{element});
    return 0;
  }

  $FORM{period} //= 0;
  $FORM{PERIOD} = $FORM{period};
  my $action_res = {};
  if ($FORM{set}) {
    $action_res = $Voip_users->voip_user_chg_tp({ %$attr, %FORM });
  }
  elsif ($FORM{del}) {
    $action_res = $Voip_users->voip_schedule_tp_del({ UID => $attr->{USER_INFO}->{UID} });
  }

  if ($action_res->{element}) {
    print $action_res->{element};
  }
  elsif ($action_res->{object}) {
    _error_show($action_res->{object});
  }

  $user = $Voip->user_info($attr->{USER_INFO}->{UID});
  Shedule->import();
  my $shedule = Shedule->new($db, $admin);

  $shedule->info({
    UID    => $user->{UID},
    TYPE   => 'tp',
    MODULE => 'Voip'
  });

  if ($shedule->{TOTAL} > 0) {
    my $table = $html->table(
      {
        width   => '100%',
        caption => $lang{SHEDULE},
        rows    =>
          [ [ "$lang{TARIF_PLAN}:", "$shedule->{ACTION}" ],
            [ "$lang{DATE}:", "$shedule->{D}-$shedule->{M}-$shedule->{Y}" ],
            [ "$lang{ADMIN}:", "$shedule->{ADMIN_NAME}" ], [ "$lang{ADDED}:", "$shedule->{DATE}" ],
            [ "ID:", "$shedule->{SHEDULE_ID}" ] ]
      }
    );
    $Tariffs->{TARIF_PLAN_SEL} = $table->show() . $html->form_input('SHEDULE_ID', "$shedule->{SHEDULE_ID}",
      { TYPE => 'HIDDEN' });
    $Tariffs->{ACTION} = 'del';
    $Tariffs->{LNG_ACTION} = $lang{DEL};
  }
  else {
    $Tariffs->{TARIF_PLAN_SEL} = $html->form_select(
      'TP_ID',
      {
        SELECTED       => $user->{TP_ID},
        SEL_LIST       => $Voip->tp_list({ COLS_NAME => 1 }),
        SEL_KEY        => 'tp_id',
        SEL_VALUE      => 'id,name',
        NO_ID          => 1,
        MAIN_MENU      => get_function_index('voip_tp'),
        MAIN_MENU_ARGV => "TP_ID=$Voip->{TP_ID}"
      }
    );

    $Tariffs->{PARAMS} .= form_period($FORM{period});
    $Tariffs->{ACTION} = 'set';
    $Tariffs->{LNG_ACTION} = $lang{CHANGE};
  }

  $Tariffs->{UID} = $user->{UID};
  $Tariffs->{TP_ID} = $user->{TP_NUM};
  $Tariffs->{TP_NAME} = ($user->{TP_NUM}) ? "$user->{TP_NUM}:$user->{TP_NAME} " : q{};

  print $html->tpl_show(templates('form_chg_tp'), $Tariffs);

  return 1;
}

#**********************************************************
=head2 voip_users_list()

=cut
#**********************************************************
sub voip_users_list {

  my @service_status = ($lang{ENABLE}, $lang{DISABLE}, $lang{ALLOW_ANSWER}, $lang{DISABLE} . ':' . $lang{NON_PAYMENT});
  if ($FORM{TP_ID}) {
    $LIST_PARAMS{TP_ID} = $FORM{TP_ID};
    $pages_qs .= "&TP_ID=$FORM{TP_ID}";
  }

  $Voip->{STATUS_SEL} = $html->form_select('DISABLE', {
    SELECTED => $FORM{DISABLE} || '',
    SEL_HASH => {
      '' => $lang{ALL},
      0  => $service_status[0],
      1  => $service_status[1],
      2  => $service_status[2],
      3  => $service_status[3],
    },
    NO_ID    => 1,
    STYLE    => \@service_status_colors,
  });

  $Voip->{GROUP_SEL} = sel_groups();
  $Voip->{TP_SEL} = $html->form_select('TP_ID', {
    SELECTED    => $FORM{TP_ID},
    SEL_LIST    => $Voip->tp_list({ COLS_NAME => 1 }),
    SEL_KEY     => 'tp_id',
    SEL_VALUE   => 'id,name',
    NO_ID       => 1,
    SEL_OPTIONS => { '' => $lang{ALL} },
    MAIN_MENU   => get_function_index('voip_tp'),
  });

  if ($FORM{search_form}) {
    form_search({
      SEARCH_FORM => $html->tpl_show(_include('voip_users_search', 'Voip'), { %{$Voip}, %FORM }, { OUTPUT2RETURN => 1 })
    });
  }

  if ($FORM{letter}) {
    $LIST_PARAMS{LOGIN} = "$FORM{letter}*";
    $pages_qs .= "&letter=$FORM{letter}";
  }

  my $status_bar = $html->button($lang{ALL}, "index=$index$pages_qs", {
    class => (defined $FORM{SERVICE_STATUS} ? "btn btn-default" : "btn btn-default active")
  });
  for (my $i = 0; $i <= 3; $i++) {
    my $name = $service_status[$i];
    my $active = '';
    my $qs = $pages_qs;
    if (defined($FORM{SERVICE_STATUS}) && $FORM{SERVICE_STATUS} eq $i && $FORM{SERVICE_STATUS} ne '') {
      $LIST_PARAMS{SERVICE_STATUS} = $FORM{SERVICE_STATUS};
      $qs .= "&SERVICE_STATUS=$i";
      $active = 'active';
    }
    else {
      $qs =~ s/\&SERVICE_STATUS=\d//;
    }
    $status_bar .= $html->button($name, "index=$index&SERVICE_STATUS=$i$qs", { class => "btn btn-default $active" });
  }
  if ($FORM{SERVICES} && $FORM{SERVICES} =~ m/^[<>]?\d+$/) {
    my $search = $FORM{SERVICES};
    if ($search !~ m/^[<>]/) {
      $search = "=$search";
    }
    $LIST_PARAMS{SERVICE_COUNT} = $FORM{SERVICES};
    $LIST_PARAMS{GROUP_BY} = "GROUP BY u.uid HAVING service_count $search";
  }

  result_former({
    INPUT_DATA      => $Voip,
    FUNCTION        => 'user_list',
    BASE_FIELDS     => 1,
    DEFAULT_FIELDS  => 'LOGIN,FIO,DEPOSIT,CREDIT,NUMBER,TP_NAME,SERVICE_STATUS',
    FUNCTION_FIELDS => 'form_payments',
    EXT_TITLES      => {
      port                    => $lang{PORT},
      cid                     => 'CID',
      filter_id               => $lang{FILTER},
      tp_name                 => $lang{TARIF_PLAN},
      voip_status             => $lang{STATUS},
      number                  => $lang{NUM},
      extra_number            => $lang{EXTRA_NUMBERS},
      extra_numbers_day_fee   => "$lang{EXTRA_NUMBERS} $lang{DAY_FEE} ",
      extra_numbers_month_fee => "$lang{EXTRA_NUMBERS} $lang{MONTH_FEE} ",
    },
    STATUS_VALS     => sel_status({ HASH_RESULT => 1 }),
    TABLE           => {
      width   => '100%',
      caption => "$lang{VOIP} - $lang{USERS}",
      qs      => $pages_qs,
      header  => $status_bar,
      ID      => 'VOIP_USERS_LIST',
      EXPORT  => 1,
      MENU    => "$lang{ADD}:index=" . get_function_index('form_wizard') . ':add' . ";$lang{SEARCH}:index=$index&search_form=1:search",
    },
    MAKE_ROWS       => 1,
    MODULE          => 'Voip',
    TOTAL           => 1
  });

  if (_error_show($Voip)) {
    return 0;
  }

  return 1;
}

#**********************************************************
=head2 voip_user($attr)

=cut
#**********************************************************
sub voip_user {
  my ($attr) = @_;

  my $res_val = $Voip_users->voip_user_preprocess($attr, { SKIP_ADMIN_RIGHTS_CHECK => 1 });

  if ($res_val->{errno}) {
    print $res_val->{element} if ($res_val->{element});
    return 0;
  }

  my $action_res = {};
  if ($FORM{add}) {
    $action_res = $Voip_users->voip_user_add({ %{ ($attr) ? $attr : {} } , %FORM });
  }
  elsif ($FORM{set}) {
    $action_res = $Voip_users->voip_user_chg({ %{ ($attr) ? $attr : {} }, %FORM });
  }
  elsif ($FORM{del} && $FORM{COMMENTS}) {
    $action_res = $Voip_users->voip_user_del({ UID => $attr->{USER_INFO}->{UID} });
  }

  if ($action_res->{element}) {
    print $action_res->{element};
  }
  elsif ($action_res->{object}) {
    _error_show($action_res->{object});
  }

  my @service_status = ($lang{ENABLE}, $lang{DISABLE}, $lang{ALLOW_ANSWER}, $lang{DISABLE} . ':' . $lang{NON_PAYMENT});

  $Voip->user_info($FORM{UID});

  if ($Voip->{TOTAL} < 1) {
    $html->message('info', $lang{INFO}, $lang{NOT_ACTIVE}, { ID => 30105 });
    #$Voip = $Voip->defaults();
    $Voip->{ACTION} = 'add';
    $Voip->{LNG_ACTION} = $lang{ACTIVATE};
    $Voip->{TP_DISPLAY_NONE} = "style='display:none'";

    $Voip->{TP_ADD} = $html->form_select('TP_ID', {
      SELECTED  => $FORM{TP_ID} || $Voip->{TP_ID} || 0,
      SEL_LIST  => $Voip->tp_list({ COLS_NAME => 1 }),
      SEL_KEY   => 'tp_id',
      SEL_VALUE => 'id,name',
      NO_ID     => 1,
      MENU      => get_function_index('voip_tp')
    });
  }
  else {
    $Voip->{CHANGE_TP_BUTTON} = $html->button(
      $lang{CHANGE},
      'UID=' . $Voip->{UID} . "&index=" . get_function_index('voip_chg_tp'),
      { class => 'btn input-group-button hidden-print', ICON => "fa fa-pencil-alt", OUTPUT2RETURN => 1 }
    );

    $Voip->{DEL_TP_BUTTON} = $html->button($lang{DEL}, "index=$index&del=1&UID=$Voip->{UID}",
      {
        MESSAGE       => "$lang{DEL} $lang{SERVICE} Voip $lang{FOR} $lang{USER} $Voip->{UID}?",
        class         => 'btn btn-danger',
        OUTPUT2RETURN => 1
      }
    );

    $Voip->{ACTION} = 'set';
    $Voip->{LNG_ACTION} = $lang{CHANGE};
  }

  $Voip->{ALLOW_ANSWER} = ' checked ' if ($Voip->{ALLOW_ANSWER}); # && $Voip->{ALLOW_ANSWER} == 1);
  $Voip->{ALLOW_CALLS} = ' checked' if ($Voip->{ALLOW_CALLS}); # && $Voip->{ALLOW_CALLS} == 1);

  $Voip->{STATUS_SEL} = $html->form_select(
    'DISABLE',
    {
      SELECTED => $Voip->{DISABLE} || 0,
      SEL_HASH => {
        0 => $service_status[0],
        1 => $service_status[1],
        2 => $service_status[2],
        3 => $service_status[3],
      },
      NO_ID    => 1,
      STYLE    => \@service_status_colors,
    }
  );

  if ($Voip->{DISABLE}) {
    $Voip->{STATUS_COLOR} = $service_status_colors[ $Voip->{DISABLE} ];
  }

  $Voip->{NAS_SEL} = $html->form_select(
    'PROVISION_NAS_ID',
    {
      SELECTED       => $Voip->{PROVISION_NAS_ID} || $FORM{PROVISION_NAS_ID} || '',
      SEL_LIST       => $Nas->list({ TYPE => 'ls_pap2t;ls_spa8000', COLS_NAME => 1, SHORT => 1, NAS_NAME => '_SHOW', PAGE_ROWS => 10000 })
        ,
      SEL_KEY        => 'nas_id',
      SEL_VALUE      => 'nas_name',
      MAIN_MENU      => get_function_index('form_nas'),
      MAIN_MENU_ARGV => ($Voip->{NAS_ID}) ? "chg=$Voip->{NAS_ID}" : ''
    }
  );

  $Voip->{PROVISION} = $html->tpl_show(templates('form_show_hide'), {
    CONTENT     => $html->tpl_show(_include('voip_provision_user', 'Voip'), $Voip, { OUTPUT2RETURN => 1 }),
    NAME        => 'Provision',
    ID          => 'PROVISION',
    BUTTON_ICON => 'plus'
  }, { OUTPUT2RETURN => 1 });

  my $service_info = $html->tpl_show(_include('voip_user', 'Voip'), { %{$attr || {}}, %{$Voip} },
    { ID => 'voip_user', OUTPUT2RETURN => 1 });

  if ($Voip->{ID}) {
    $service_info .= voip_phone_aliases({ %{$attr || {}}, %{$Voip}, %FORM });
  }

  return '', $service_info if ($attr->{PROFILE_MODE});

  print $service_info;

  return 1;
}

#**********************************************************
=head2 voip_nas() - Time intervals

 form_intervals()

=cut
#**********************************************************
sub voip_nas {
  $FORM{subf} = 18;

  voip_tp();

  return 1;
}

#*******************************************************************
=head2 voip_online() - online users

=cut
#*******************************************************************
sub voip_online {

  if (!$permissions{5} || ! $permissions{5}{0}) {
    $html->message('err', $lang{ERROR}, $lang{ERR_ACCESS_DENY});
    return 0;
  }

  my $message;

  if ($FORM{ping}) {
    host_diagnostic($FORM{ping});
  }
  elsif ($FORM{hangup}) {
    my ($nas_id, $acct_session_id) = split(/ /, $FORM{hangup});
    $Nas->info({ NAS_ID => $nas_id, SECRETKEY => $conf{secretkey} });

    if (_error_show($Nas)) {
      return 0;
    }

    my $nas_port_id = 0;
    require AXbills::Nas::Control;
    my $Nas_cmd = AXbills::Nas::Control->new($db, \%conf);
    my $ret = $Nas_cmd->hangup($Nas, $nas_port_id, "", {
      SESSION_ID => $acct_session_id
    });

    if ($ret == 0) {
      $message = "$lang{NAS} ID: $nas_id
                 $lang{NAS} IP: $Nas->{NAS_IP}
                 $lang{PORT}: $nas_port_id
                 $lang{SESSION_ID}: $acct_session_id
                 $ret ";
      sleep 3;
    }
    elsif ($ret == 1) {
      $message = 'NAS NOT supported yet';
    }

    $html->message('info', $lang{INFO}, $message);
  }
  elsif ($FORM{zapall}) {
    if (!$permissions{5}{1}) {
      $html->message('err', $lang{ERROR}, "$lang{ERR_ACCESS_DENY}");
      return 0;
    }

    $Sessions->zap(0, 0, 0, { ALL => 1, %FORM });
    $html->message('info', $lang{INFO}, "Zapped all sessions");
  }
  elsif ($FORM{zap}) {
    if (!$permissions{5}{1}) {
      $html->message('err', $lang{ERROR}, "$lang{ERR_ACCESS_DENY}");
      return 0;
    }

    my ($nas_id, $acct_session_id, $nas_port_id) = split(/[ +]+/, $FORM{zap}, 3);
    $Sessions->zap($nas_id, $acct_session_id);

    if (_error_show($Sessions)) {
      return 0;
    }

    $Nas->info({ NAS_ID => $nas_id, SECRETKEY => $conf{secretkey} });
    $message = "$lang{NAS}: $Nas->{NAS_IP} / " . ($Nas->{NAS_INDENTIFIER} || q{}) . "\n"
      . "$lang{PORT}: " . ($nas_port_id || q{}) . "\n"
      . "SESSION_ID: $acct_session_id\n";

    $Sessions->list(
      {
        ACCT_SESSION_ID => $acct_session_id,
        NAS_ID          => $Nas->{NAS_ID}
      }
    );

    if ($Sessions->{TOTAL} < 1) {
      $message .= $html->button('add to log', "index=$index&tolog=$acct_session_id&nas_id=$nas_id",
        { BUTTON => 1 }) . ' ' . $html->button("$lang{DEL}",
        "index=$index&del=$acct_session_id&nas_id=$nas_id", { BUTTON => 1 });
    }
    else {
      $message = $lang{EXIST};
      $Sessions->{delete} = 1;
      $Sessions->online_del({
        NAS_ID          => $nas_id,
        ACCT_SESSION_ID => $acct_session_id
      });
    }

    $html->message('info', $lang{CLOSED}, $message);
  }
  elsif ($FORM{tolog}) {
    my $ACCT_INFO = $Sessions->online_info({
      NAS_ID          => $FORM{nas_id},
      ACCT_SESSION_ID => $FORM{tolog}
    });

    if ($ACCT_INFO->{TOTAL} < 1) {
      $html->message('err', $lang{ERROR}, "$lang{NOT_EXIST} $lang{SESSION_ID} [$FORM{tolog}]");
      return 0;
    }

    require Voip_aaa;
    $ACCT_INFO->{ACCT_STATUS_TYPE} = 'Stop';

    $Nas->info({
      NAS_ID    => $ACCT_INFO->{NAS_ID},
      SECRETKEY => $conf{secretkey}
    });

    Voip_aaa->import();
    my $Acct = Voip_aaa->new($db, \%conf);
    $Acct->accounting($ACCT_INFO, $Nas, \%conf);

    if ($Acct->{errno}) {
      $html->message('err', $lang{ERROR}, "[$Acct->{errno}] $Acct->{errstr}");
    }
    else {
      my $table = $html->table({ width => '100%' });
      while (my ($k, $v) = each %{$ACCT_INFO}) {
        $table->addrow("$k", $v);
      }

      $html->message('info', $lang{ADDED}, $table->show());
    }

    $Sessions->online_del({
      NAS_ID          => $ACCT_INFO->{NAS_ID},
      ACCT_SESSION_ID => $ACCT_INFO->{ACCT_SESSION_ID}
    });
  }
  elsif ($FORM{del} || $FORM{dellist}) {
    if ($FORM{dellist}) {
      my @sessions_list = split(/, /, $FORM{dellist});
      $Sessions->online_del({ SESSIONS_LIST => \@sessions_list });
      $FORM{del} = $FORM{dellist};
    }
    else {
      $Sessions->online_del({
        NAS_ID          => $FORM{nas_id},
        ACCT_SESSION_ID => $FORM{del}
      });
    }

    if (!$Sessions->{errno}) {
      $html->message('info', $lang{DELETED}, "NAS_ID: " . ($FORM{nas_id} || q{})
        . "\nACCT_SESSION_ID: " . ($FORM{del} || q{}));
    }
  }

  my $form_link = '';
  my $cure = '';

  if ($FORM{DEBUG}) {
    $Sessions->{debug} = 1;
  }

  if ($FORM{ZAPED}) {
    $LIST_PARAMS{ZAPED} = 1;
    $form_link = $html->element('div', $html->button('On line', "index=$index", { BUTTON => 2 }),
      { style => 'float: right;' });
    $cure = 'Zap';
  }
  else {
    $form_link = $html->element('div', $html->button($lang{ZAPED}, "index=$index&ZAPED=1", { BUTTON => 2 }),
      { style => 'float: right;' });
    $cure = 'Online';
  }

  $Sessions->online({ %LIST_PARAMS });
  my $dub_logins = $Sessions->{dub_logins};

  my $table = $html->table({
    caption => $cure,
    width   => '100%',
    title   => [
      $lang{USER},
      $lang{FIO},
      $lang{CALLED_STATION_ID},
      $lang{CALLING_STATION_ID},
      $lang{DURATION},
      $lang{TYPE},
      $lang{IP_ADDRESS}, "-", "-", "-" ],
    qs      => $pages_qs,
    ID      => 'VOIP_ONLINE'
  });

  my $online = $Sessions->{nas_sorted};
  my $nas_list = $Nas->list({ PAGE_ROWS => 10000 });
  my @call_types = ("$lang{ANSWER}", "$lang{ORIGIN}");
  foreach my $nas_row (@{$nas_list}) {
    next if (!defined($online->{ $nas_row->[0] }));

    $table->{rowcolor} = $_COLORS[0];
    $table->{extra} = "colspan='9' class='small'";
    $table->addrow("$nas_row->[0]:" . $html->button($html->b($nas_row->[1]),
      "index=" . get_function_index('form_nas') . "&NAS_ID=$nas_row->[0]") . ":$nas_row->[4]");

    my $l = $online->{ $nas_row->[0] };
    my $bg;
    foreach my $line (@{$l}) {
      delete($table->{rowcolor});
      delete($table->{extra});
      if (defined($dub_logins->{ $line->[0] })) {$bg = '#FFFF00';}
      elsif ($line->[9] == 3) {$bg = '#FF0000';}

      my $zap = $html->button('Z', "index=$index&zap=$nas_row->[0]+$line->[10]", { TITLE => 'Zap', class => 'del' });
      my $hangup = ($FORM{ZAPED}) ? $html->form_input('dellist', "$line->[10]",
        { TYPE => 'checkbox' }) : $html->button('H',
        "index=$index&hangup=$nas_row->[0]+$line->[2]+$line->[9]+$line->[0]", { TITLE => 'Hangup', class => 'off' });

      my $user_info = '';

      my $call_type = ($line->[5] == 0) ? $html->color_mark($call_types[ $line->[5] ], $_COLORS[7]) : $call_types[ $line->[5] ];

      $table->addrow($html->button($line->[0], "index=11&UID=$line->[9]", { TITLE => $user_info }),
        $line->[1],
        $line->[2],
        $line->[3],
        $line->[4],
        $call_type,
        $line->[6],
        $html->button('P', "index=$index&ping=$line->[6]", { TITLE => 'Ping', BUTTON => 1 }), $zap, $hangup
      );
    }
  }

  my $table2 = $html->table({
    width => '100%',
    rows  => [ [ $html->b("$lang{TOTAL}:"), $html->b($Sessions->{TOTAL}), $form_link ] ]
  });

  my $output = $table->show() . $table2->show();

  if ($FORM{ZAPED}) {
    $output = $html->form_main({
      CONTENT => $output,
      HIDDEN  => {
        index => $index,
        ZAPED => 1
      },
      SUBMIT  => { go => "$lang{DEL}" },
      METHOD  => 'GET'
    });
  }
  else {
    my $justelement = $html->element(
      'div',
      $html->element('div',
        $html->element('label', "$lang{REFRESH} (sec): ")
          . $html->form_input('REFRESH', int(($FORM{REFRESH}) ? $FORM{REFRESH} : 0), { SIZE => 4 })
          . $html->element('br')
          . $html->form_input('SHOW', $lang{SHOW}, { TYPE => 'SUBMIT' })
          . $html->button('ZAP All', "index=$index&zapall=1",
          { class => 'btn btn-danger', IMG => ':tech_work.png', MESSAGE => $lang{MSG_WANT_ZAP} }), { class => 'card-body' }),
      { class => 'card card-primary card-outline card-form' });

    $output .= $html->form_main({
      CONTENT => $justelement,
      HIDDEN  => { index => "$index" },
      METHOD  => 'GET'
    });
  }

  print $output;

  return 1;
}

#**********************************************************
=head2 voip_use_allmonthes();

=cut
#**********************************************************
sub voip_use_allmonthes {

  $FORM{allmonthes} = 'y';
  voip_use();

  return 1;
}

#**********************************************************
=head2 voip_stats($attr) stats

=cut
#**********************************************************
sub voip_stats {
  my ($attr) = @_;

  my $uid = 0;

  if (defined($attr->{USER_INFO})) {
    my $user = $attr->{USER_INFO};

    $uid = $user->{UID};
    $LIST_PARAMS{UID} = $uid;
    if (!defined($FORM{sort})) {
      $LIST_PARAMS{SORT} = 2;
      $LIST_PARAMS{DESC} = 'DESC';
    }

    my $op_sid = $COOKIES{OP_SID} || q{};
    if (defined($FORM{OP_SID}) and $FORM{OP_SID} eq $op_sid) {
      $html->message('err', $lang{ERROR}, "$lang{EXIST} $FORM{OP_SID} eq $op_sid");
    }
    elsif ($FORM{bm}) {
      use Bills;
      my $Bill = Bills->new($db);
      $Bill->action('add', $FORM{BILL_ID}, $FORM{sum});
      if (_error_show($Bill)) {
        $html->message('info', $lang{INFO}, "$lang{ADDED}: SUM $FORM{sum}, BILL_ID: $FORM{BILL_ID}");
      }
    }
    elsif ($FORM{SESSION_ID}) {
      $pages_qs .= "&SESSION_ID=$FORM{SESSION_ID}";
      voip_session_detail({ USER_INFO => $attr->{USER_INFO} });

      return 0;
    }
  }

  _error_show($Sessions);

  if ($FORM{rows}) {
    $LIST_PARAMS{PAGE_ROWS} = $FORM{rows};
    $conf{list_max_recs} = $FORM{rows};
    $pages_qs .= "&rows=$conf{list_max_recs}";
  }

  #PEriods totals
  my $list = $Sessions->periods_totals({ %LIST_PARAMS });

  if (!defined($Sessions->{sum_4})) {
    $html->message('info', $lang{INFO}, "$lang{NO_RECORD}");
    return 0;
  }

  my $table = $html->table({
    width       => '100%',
    title_plain => [ $lang{PERIOD}, $lang{DURATION}, $lang{SUM} ],
  });

  for (my $i = 0; $i < 5; $i++) {
    $table->addrow($html->button("$PERIODS[$i]", "index=$index&period=$i$pages_qs"), "$Sessions->{'duration_'. $i}",
      $Sessions->{ 'sum_' . $i });
  }
  print $table->show();

  $table = $html->table({
    width       => '100%',
    title_plain => [ "$lang{FROM}: ", $html->date_fld2('FROM_DATE', { MONTHES => \@MONTHES }), "$lang{TO}: ",
      $html->date_fld2('TO_DATE', { MONTHES => \@MONTHES }), "$lang{ROWS}: ",
      $html->form_input('rows', int($conf{list_max_recs}), { SIZE => 4 }),
      $html->form_input('show', $lang{SHOW}, { TYPE => 'submit' }) ],
  });

  print $html->form_main({
    CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
    HIDDEN  => {
      sid   => $sid,
      index => $index,
      UID   => $uid
    }
  });

  voip_stats_calculation($Sessions);

  if ($FORM{show}) {
    $LIST_PARAMS{INTERVAL} = "$FORM{FROM_DATE}/$FORM{TO_DATE}";
    $pages_qs .= "&show=1&FROM_DATE=$FORM{FROM_DATE}&TO_DATE=$FORM{TO_DATE}";
  }
  elsif (defined($FORM{period})) {
    $LIST_PARAMS{PERIOD} = int($FORM{period});
    $pages_qs .= "&period=$FORM{period}";
  }
  elsif ($FORM{DATE}) {
    $LIST_PARAMS{DATE} = $FORM{DATE};
    $pages_qs .= "&DATE=$FORM{DATE}";
  }

  if (!defined($FORM{sort})) {
    $LIST_PARAMS{SORT} = 2;
    $LIST_PARAMS{DESC} = 'DESC';
  }

  #Session List
  $list = $Sessions->list({ %LIST_PARAMS });
  $table = $html->table({
    width       => '640',
    caption     => $lang{TOTAL},
    title_plain => [ $lang{SESSIONS}, $lang{DURATION}, $lang{SUM} ],
    rows        => [ [ $Sessions->{TOTAL}, $Sessions->{DURATION}, $Sessions->{SUM} ] ],
  });

  print $table->show();

  voip_sessions($list, $Sessions) if ($permissions{3} && $Sessions->{TOTAL} > 0);

  return 1;
}

#*******************************************************************
=head2 voip_session_detail($attr) - Session Detail

=cut
#*******************************************************************
sub voip_session_detail {
  my ($attr) = @_;
  my $user;

  if (defined($attr->{USER_INFO})) {
    $user = $attr->{USER_INFO};
    $LIST_PARAMS{LOGIN} = $user->{LOGIN};
  }
  elsif ($FORM{UID}) {
    voip_user();
    return 0;
  }

  my %ACCT_TERMINATE_CAUSES_VALUE = reverse %{ACCT_TERMINATE_CAUSES()};

  $Sessions->session_detail({ %FORM });
  if ($Sessions->{ACCT_TERMINATE_CAUSE}) {
    $Sessions->{ACCT_TERMINATE_CAUSE} = "$Sessions->{ACCT_TERMINATE_CAUSE} : " . $ACCT_TERMINATE_CAUSES_VALUE{ $Sessions->{ACCT_TERMINATE_CAUSE} };
  }

  $Sessions->{RECALC} = $html->button($lang{RECALCULATE},
    "index=$index&RECALC=1&SESSION_ID=$FORM{SESSION_ID}&UID=$FORM{UID}", { BUTTON => 1 });

  $Sessions->{ROUTE_ID} = $html->button($Sessions->{ROUTE_ID},
    "&ROUTE_ID=$Sessions->{ROUTE_ID}&index=" . get_function_index('voip_routes'));

  $html->tpl_show(_include('voip_session_detail', 'Voip'), { %{$Sessions}, });

  return 1;
}

#*******************************************************************
=head2 voip_stats_calculation($sessions_)

=cut
#*******************************************************************
sub voip_stats_calculation {
  my ($sessions_) = @_;

  $sessions_->calculation({ %LIST_PARAMS });

  my $table = $html->table({
    width       => '640',
    title_plain => [ "-", "$lang{MIN}", "$lang{MAX}", "$lang{AVG}" ],
    rows        => [ [ $lang{DURATION}, $sessions_->{MIN_DUR}, $sessions_->{MAX_DUR}, $sessions_->{AVG_DUR} ],
      [ $lang{SUM}, $sessions_->{MIN_SUM}, $sessions_->{MAX_SUM}, $sessions_->{AVG_SUM} ] ]
  });

  print $table->show();

  return 1;
}

#**********************************************************
=head2 voip_gk_console() voip_gk_console

=cut
#**********************************************************
sub voip_gk_console {

  if (!$permissions{5}{0}) {
    $html->message('err', $lang{ERROR}, "$lang{ERR_ACCESS_DENY}");
    return 0;
  }

  my $list = $Nas->list({
    NAS_TYPE  => 'gnugk',
    PAGE_ROWS => 10000,
    DOMAIN_ID => $admin->{DOMAIN_ID}
  });

  my $table = $html->table({
    caption => $lang{NAS},
    width   => '100%',
    title   => [ "#", "$lang{NAME}", 'NAS-Identifier', 'IP' ],
    qs      => $pages_qs,
    ID      => 'NAS_INFO'
  });

  #my ($host, $user, $password);
  foreach my $line (@{$list}) {
    if ($FORM{NAS_ID} && $line->[0] eq $FORM{NAS_ID}) {
      $table->{rowcolor} = $_COLORS[4];
    }
    else {
      undef($table->{rowcolor});
    }

    $table->addrow($html->button("$line->[0]", "index=$index&NAS_ID=$line->[0]"),
      $line->[1],
      $line->[2],
      $line->[3]
    );
  }
  print $table->show();

  if ($FORM{NAS_ID}) {

    my %gk_commands = (
      help                         => 'help',
      unregisteralias              => 'unregisteralias',
      PrintAllRegistrations        => 'PrintAllRegistrations, r, ? - Show all registered endpoints',
      PrintAllRegistrationsVerbose => 'PrintAllRegistrationsVerbose, rv, ?? - Show details of all registered endpoints',
      PrintCurrentCalls            =>
        "PrintCurrentCalls, c, ! - Show all current calls using the same ACF syntax as in call establishment. ",
      PrintCurrentCallsVerbose     => "PrintCurrentCallsVerbose, cv, !!  - Show details of all current calls.",
      Find                         => "Find, f - Find a registered endpoint by an alias or a prefix. ",
      FindVerbose                  =>
        "FindVerbose, fv - Find details of a registered endpoint by an alias or a prefix. ",
      UnregisterIP                 => "Forcedly unregister an endpoint by IP and call signalling port. ",
      UnregisterAllEndpoints       => "Forcedly unregister all registered endpoints",

      who                          => 'who',
      statistics                   => 'statistics',
      shutdown                     => 'shutdown',
      debug                        => 'debug',
      disconnectalias              => 'disconnectalias',
      disconnectcall               => 'disconnectcall',
      disconnectendpoint           => 'disconnectendpoint',
      disconnectip                 => 'disconnectip',
      disconnectsession            => 'disconnectsession',
      version                      => 'version',
      reload                       => 'reload',
    );

    if ($FORM{command}) {
      $Nas->info({ NAS_ID => $FORM{NAS_ID} });
      my @commands = ();

      require AXbills::Nas::Control;
      AXbills::Nas::Control->import();
      #my $Nas_cmd = AXbills::Nas::Control->new($db, \%conf);

      push @commands, "login:\t$Nas->{NAS_MNG_USER}";
      push @commands, "assword:\t$Nas->{NAS_MNG_PASSWORD}";
      push @commands, ";\t$FORM{command}";
      push @commands, ";\tquit";

      my $result = AXbills::Nas::Control::telnet_cmd("$Nas->{NAS_MNG_IP_PORT}", \@commands, { debug => 1 });
      my $total = 0;
      my @rows = split(/\n/, $result);
      my @registred = ();

      if ($FORM{command} =~ /\!|CurrentCalls/) {
        $table = $html->table({
          width   => '100%',
          title   =>
            [ 'NUMBER', 'ACF', 'Caller_IP:Port', 'Caller_EPID', 'CRV', 'DestinationInfo', 'SrcInfo', 'IsAnswered', '-' ]
            ,
          qs      => $pages_qs,
          caption => 'Associated'
        });

        @rows = split(/\n/, $result);

        foreach my $line (@rows) {
          if ($line =~ /Dial/) {
            #print "#      Caller_Aliases|Callee_Aliases|Bandwidth|Connected_Time <r>";
            @registred = split(/\|/, $line);
            $table->addrow(@registred);
            $total++;
          }
          elsif ($line =~ /ACF/) {
            @registred = split(/\|/, $line);

            #ACF|Caller_IP:Port|Caller_EPID|CRV|DestinationInfo|SrcInfo|IsAnswered;
            #ACF|Callee_IP:Port|Callee_EPID|CRV|DestinationInfo|SrcInfo|IsAnswered;
            $table->addrow('&nbsp;', @registred,
              $html->button("H", "index=$index&NAS_ID=$FORM{NAS_ID}&command=disconnectcall+$registred[4]",
                { TITLE => 'Hangup', BUTTON => 1 }));
          }
        }
        print $table->show();

        $table = $html->table({
          caption => 'Commands',
          width   => '100%',
          rows    => [ [ "$lang{TOTAL}:", $html->b($total) ] ]
        });

        print $table->show();

        #CurrentCalls
        #Call No. 1 | CallID 06 20 60 00 00 60 40 10 00 00 00 0a f4 53 db fd | 5 | 175
        #Dial 600:dialedDigits
        #ACF|192.168.101.23:2832|9868_ag1|8354|600:dialedDigits|101:dialedDigits|false;
        #ACF|192.168.101.18:1720|9870_ag1|41122|600:dialedDigits|101:dialedDigits|true;
        #Number of Calls: 1 Active: 0 From Neighbor: 0 From Parent: 0
      }
      elsif ($FORM{command} =~ /\?|PrintAllRegistrations$/) {
        $table = $html->table({
          width   => '100%',
          title   => [ "#", "IP", 'NUMBER', "$lang{TYPE}", "ID", '' ],
          qs      => $pages_qs,
          caption => 'Associated'
        });

        foreach my $line (@rows) {
          if ($line =~ /RCF/) {
            @registred = split(/\|/, $line);
            push @registred, $html->button('H', "index=$index&NAS_ID=$FORM{NAS_ID}&command=UnregisterIP+$registred[1]",
              { TITLE => 'Hangup', BUTTON => 1 });
            $table->addrow(@registred);
          }
        }
        print $table->show();

        $table = $html->table({
          width => '100%',
          rows  => [ [ "$lang{TOTAL}:", "$total" ] ]
        });
        print $table->show();
      }
      else {
        $result =~ s/\n/<br>/g;
        $html->message('info', $lang{INFO}, "$result");
      }
    }

    print $html->form_main({
      CONTENT => $html->form_input('command', $FORM{command}),
      HIDDEN  => {
        index  => $index,
        NAS_ID => $FORM{NAS_ID}
      },
      SUBMIT  => { go => $lang{SHOW} }
    });

    $table = $html->table({
      caption => 'Commands',
      width   => '100%',
      title   => [ "_COMMAND", "_HELP" ],
    });

    foreach my $k (sort keys %gk_commands) {
      $table->addrow($html->button("$k", "index=$index&NAS_ID=$FORM{NAS_ID}&command=$k"), $gk_commands{$k});
    }
    print $table->show();
  }

  return 1;
}

#***********************************************************
=head2 voip_report

=cut
#***********************************************************
sub voip_report {
  my ($type, $attr) = @_;
  my $REPORT = "Module: Voip ($type)\n";

  %LIST_PARAMS = %{$attr->{LIST_PARAMS}} if (defined($attr->{LIST_PARAMS}));

  return $REPORT;
}

#**********************************************************
=head voip_recalculate - Recalculate sessions sum

=cut
#**********************************************************
sub voip_recalculate {
  if (!$FORM{recalc}) {
    my $params = ();
    $params->{UID} = $FORM{UID};

    $params->{FROM_DATE} = $html->date_fld2('FROM_DATE', { MONTHES => \@MONTHES });
    $params->{TO_DATE} = $html->date_fld2('TO_DATE', { MONTHES => \@MONTHES });

    $html->tpl_show(_include('voip_recalculate', 'Voip'), $params);

    return 1;
  }

  my $result = $Voip_users->voip_recalculate_sum($users, \%FORM);

  if ($result->{element}) {
    print $result->{element};
  }
  elsif ($result->{object}) {
    _error_show($result->{object});
  }

  return 1;
}

#**********************************************************
=head voip_phone_aliases($attr) - Recalculate sessions sum


=cut
#**********************************************************
sub voip_phone_aliases {
  my ($attr) = @_;

  if ($FORM{alias_add}) {
    my $action_res = $Voip_users->voip_alias_add(\%FORM, $attr);

    if ($action_res->{element}) {
      print $action_res->{element};
    }
    elsif ($action_res->{object}) {
      _error_show($action_res->{object});
    }
  }
  elsif ($FORM{alias_del} && $FORM{COMMENTS}) {
    $Voip->phone_aliases_del($FORM{alias_del}, \%FORM);
    $html->message('info', $lang{INFO}, $lang{ADDED}) if (!$Voip->{errno});
  }

  _error_show($Voip);

  my $alias_list = $Voip->phone_aliases_list({
    NUMBER     => '_SHOW',
    DISABLE    => '_SHOW',
    CHANGED    => '_SHOW',
    COLS_NAME  => 1,
    %LIST_PARAMS,
    UID        => $attr->{UID},
    SERVICE_ID => $attr->{ID}
  });

  my $table = $html->table({
    caption => $lang{EXTRA_NUMBERS} . ': ' . ($Voip->{TOTAL} > 0 ? $Voip->{TOTAL} : 0),
    width   => '400',
    title   => [ $lang{PHONE}, $lang{STATUS}, $lang{CHANGED}, "-" ],
    qs      => $pages_qs,
    ID      => 'VOIP_PHONE_ALIASES'
  });

  foreach my $alias (@$alias_list) {
    $table->addrow($alias->{number}, $status[$alias->{disable}], $alias->{changed},
      $html->button($lang{DEL}, "index=$index&alias_del=$alias->{id}&UID=$attr->{UID}", {
        MESSAGE       => "$lang{DEL}: $alias->{number} ?",
        OUTPUT2RETURN => 1,
        class         => 'del'
      })
    );
  }

  $table->addrow($html->form_input('NUMBER', ''),
    $html->form_input('alias_add', $lang{ADD}, { TYPE => 'SUBMIT' }), '', '');

  return $html->form_main({
    CONTENT        => $table->show({ OUTPUT2RETURN => 1 }),
    HIDDEN         => { index => $index, UID => $attr->{UID} },
    NAME           => 'voip_phone_alias',
    ID             => 'VOIP_PHONE_ALIAS',
    EXPORT_CONTENT => 'VOIP_PHONE_ALIAS',
    OUTPUT2RETURN  => 1,
    class          => 'container-md',
  });
}

1;
