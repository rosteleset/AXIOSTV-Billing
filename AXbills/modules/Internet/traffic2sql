#!/usr/bin/perl

=head1 NAME

  Traffic collector
    PUSH traffic to sql

=cut

use strict;
use warnings;

BEGIN {
  use FindBin '$Bin';
  our $libpath = $Bin . '/../';
  my $sql_type = 'mysql';
  unshift( @INC,
    $libpath . "AXbills/$sql_type/",
    $libpath . '/lib/' );

  eval { require Time::HiRes; };
  our $begin_time = 0;
  if ( !$@ ){
    Time::HiRes->import( qw(gettimeofday) );
    $begin_time = Time::HiRes::gettimeofday();
  }
}

use POSIX qw(strftime mktime ctime);
use AXbills::Base qw(check_time gen_time parse_arguments in_array mk_unique_value
  int2byte ip2int int2ip tpl_parse date_diff cmd);
use AXbills::Server;
use AXbills::SQL;
use AXbills::Nas::Control;
use Log qw(log_add);

our (%conf, $DATE, $TIME, $var_dir, @MODULES);

if ( $#ARGV < 1 ){
  help();
  exit;
}

# Get nas servers is
my $NAS_IDS = $ARGV[0];
my $debug = 0;

do $Bin . '/config.pl';
my $Log = Log->new( undef, \%conf );

my $begin_time = check_time();

my $argv = parse_arguments( \@ARGV );
my $flow_dir = ($argv->{flowdir}) ? $argv->{flowdir} : $var_dir . "log/ipn/";
$Log->{LOG_FILE} = "$flow_dir/traffic2sql.log";

if ( !$argv->{LOG_FILE} && !defined( $argv->{'-d'} ) ){
  $Log->{PRINT} = 1;
}

if ( defined( $argv->{DEBUG} ) ){
  print "Debug mode on\n";
  $debug = $argv->{DEBUG};
}
elsif ( defined( $argv->{help} ) ){
  print "Help:\n";
}

#Demonize section
if ( defined( $argv->{'-d'} ) && !defined( $argv->{'-fg'} ) ){
  print "Start... debug: $debug\n";

  my $pid_file = daemonize( {
      PROGRAM_NAME => 'traffic2sql',
        LOG_DIR    => $flow_dir
    } );

  $Log->log_print( 'LOG_EMERG', '', "traffic2sql Daemonize... $pid_file" );
}
#Stop daemon
elsif ( defined( $argv->{stop} ) ){
  stop_server( {
    PROGRAM_NAME => 'traffic2sql',
    LOG_DIR      => $flow_dir
  } );

  exit;
}
elsif ( make_pid( $flow_dir . "/traffic2sql.pid" ) == 1 ){
  print "Already running PID: !\n";
  exit;
}

if ( $conf{IPN_DB} ){
  ($conf{dbtype}, $conf{dbhost}, $conf{dbname}, $conf{dbuser}, $conf{dbpasswd}) = split( /:/, $conf{IPN_DB}, 5 );
}

my $db = AXbills::SQL->connect( $conf{dbtype}, $conf{dbhost}, $conf{dbname}, $conf{dbuser}, $conf{dbpasswd}, { %conf, CHARSET => ($conf{dbcharset}) ? $conf{dbcharset} : undef } );

# Get options ==============================================
my $IF_NAME = ($argv->{INTERFACE}) ? $argv->{INTERFACE} : '';

$conf{UNKNOWN_IP_LOG} = $argv->{UNKNOWN_IP_LOG} if (defined( $argv->{UNKNOWN_IP_LOG} ));

if($conf{INTERNET_UNKNOWN_IP_LOG}) {
  $conf{UNKNOWN_IP_LOG}=1;
}

if ( $argv->{DETAIL_ONLY} ){
  $conf{IPN_DETAIL} = 1;
  $conf{INTERNET_TRAFFIC_DETAIL}=1;
  print "DETAIL_ONLY=$conf{IPN_DETAIL}\n" if ($debug > 0);
}
if ( $argv->{TCOLLECTOR} ){
  $conf{IPN_TCOLLECTOR} = 1;
  print "TCOLLECTOR=$conf{IPN_TCOLLECTOR}\n" if ($debug > 0);
}
if ( $argv->{AMON_ALIVE} ){
  $conf{IPN_AMON_ALIVE} = $argv->{AMON_ALIVE};
  print "AMON_ALIVE=$conf{IPN_AMON_ALIVE}\n" if ($debug > 0);
}

#==========================================================
my $Ipn;
if(in_array('Internet', \@MODULES)) {
  require Internet::Collector;
  Internet::Collector->import();
  $Ipn = Internet::Collector->new( $db, \%conf );
}
else {
  require Ipn_Collector;
  Ipn_Collector->import();
  $Ipn = Ipn_Collector->new( $db, \%conf );
}

my $Nas_cmd  = AXbills::Nas::Control->new( $db, \%conf );
my $NAS_ID   = 0;
my $log_file = $var_dir . "log/ipn/trafd_" . $NAS_ID . "_" . $IF_NAME;

if ( ! $NAS_IDS  ){
  print "You don't specify NAS ID\n";
  exit;
}

$log_file = $argv->{log} if ($argv->{log});

my $FLOW_CAT = $argv->{FLOW_CAT} || '/usr/local/bin/flow-cat';
my $FLOW_PRINT = $argv->{FLOW_PRINT} || '/usr/local/bin/flow-print';
my $FLOW_NFDUMP = $argv->{FLOW_NFDUMP} || '/usr/bin/nfdump';

$Ipn->{debug} = 1 if ($debug > 3);
$conf{MB_SIZE} = $conf{KBYTE_SIZE} * $conf{KBYTE_SIZE};

#my %PROTOCOLS = (
#  'tcp' => 1,
#  'udp' => 2
#);
#my $PROTOCOL = 0;    #(defined($PROTOCOLS{$PROTOCOL})) ? $PROTOCOLS{$PROTOCOL} : 0;

#Get users info from online log
$Ipn->user_ips( { NAS_ID => $NAS_IDS } );

#Clear log
if ( -f $log_file ){
  get_collector_data( $log_file );
  processing();
  if ( !unlink( "$log_file" ) ){
    print "Remove error: $log_file\n";
  }
  exit;
}

$conf{IPN_FW_FIRST_RULE} = 20000 if (!$conf{IPN_FW_FIRST_RULE});
Time::HiRes->import( qw(gettimeofday) );

if ( defined( $argv->{'-d'} ) ){
  while (1) {
    $begin_time = check_time();
    $Ipn->user_ips( { NAS_ID => $NAS_IDS } );
    flow_capture();
    my $UPDATE_TIME = 10;
    sleep $UPDATE_TIME;
  }
}
else{
  flow_capture();
}

#**********************************************************
=head2 flow_capture($attr) Get information from flowtools

=cut
#**********************************************************
sub flow_capture{

  my $FLOWTOOLS_IP_AGGREGATION = '';
  if ( $argv->{FLOWTOOLS_IP_AGGREGATION} ){
    $FLOWTOOLS_IP_AGGREGATION = 'awk \'BEGIN { ip1=0 };  { ips[$1"  "$2]+=$6 }; END { for (i in ips) { print i" "1" "0" "0" "ips[i]" "0; } }\' |';
  }

  my ($year,$month,$day) = split(/\-/, $DATE);
  my ($hour,$min,$sec) = split(/\:/, $TIME);
  my $previous_hour = $hour - 1;

  if ($argv->{NFSEN}){
    $flow_dir .= "/$year/$month/$day";
  }

  #Get flow tools files@contents
  my @contents = ();
  opendir my $dh, $flow_dir or die "Can't open dir '$flow_dir' $!\n";
  if ($argv->{NFSEN}){
    @contents = grep /^nfcapd*/, readdir $dh;
  }
  else {
    @contents = grep /^ft*/, readdir $dh;
  }
  closedir $dh;

  my $session_interval = 0;
  my $circles = 0;

  foreach my $log ( sort @contents ){
    print "$flow_dir/$log\n" if ($debug > 1);
    if ( "$log" =~ /ft-(\w+)\.(\d+)\-(\d+)\-(\d+)\.(\d{2})(\d{2})(\d{2})[\-|\+](\d+)/ ){
      my (undef, undef, undef, undef, undef, undef, undef, undef, undef, $mtime) = stat( "$flow_dir/$log" );

      #File date
      my $start_date = "$2-$3-$4 $5:$6:$7";
      $session_interval += $mtime - mktime( int( $7 ), $6, ($5 - 1), int( $4 ), int( $3 ) - 1, int( $2 ) - 1900 );

      #Transaction begin
      if ( $argv->{TRANSACTION} ){
        $db->{db}->{AutoCommit} = 0;
        $db->{TRANSACTION} = 1;
        if ( $Ipn->{db2} ){
          $Ipn->{db2}->{AutoCommit} = 0;
          #$Ipn->{db2}{db}->{TRANSACTION}=1;
        }
        print "Transaction Start '$db->{db}' / $db->{db}->{AutoCommit}\n" if ($debug > 3);
      }

      #Last modified
      my $end_date = strftime( "%Y-%m-%d %H:%M:%S", localtime( $mtime ) );
      get_collector_data( "$FLOW_CAT $flow_dir/$log | $FLOW_PRINT | $FLOWTOOLS_IP_AGGREGATION",
        { START => $start_date } );

      #Dont proccess files if only detalization
      if ( !$argv->{DETAIL_ONLY} ){
        processing({
          START            => $start_date,
          STOP             => $end_date,
          SESSION_INTERVAL => $session_interval,
          LOG              => $log
        });
      }

      if ( $argv->{TRANSACTION} && $debug < 5 ){
        my DBI $db_ = $db->{db};
        $db_->commit();
        $db_->{AutoCommit} = 1;
        if ( $Ipn->{db2} ){
          my DBI $db2_ = $Ipn->{db2};
          $db2_->commit();
          $db2_->{AutoCommit} = 1;
        }
        print "Transaction End '$db->{db}' / $db->{db}->{AutoCommit}\n" if ($debug > 3);
      }

      # Delete log file
      if ( $argv->{FLOWTOOLS_FT_BACKUP} ){
        if ( !-d $argv->{FLOWTOOLS_FT_BACKUP} ){
          print "Error: Can't find dir '$argv->{FLOWTOOLS_FT_BACKUP}'\n";
          exit;
        }
        system( "mv $flow_dir/$log $argv->{FLOWTOOLS_FT_BACKUP}" );
      }
      else{
        unlink( "$flow_dir/$log" );
      }
    }
    elsif ("$log" =~ /nfcapd\.(\d+)/){
      # take flow for last hour +
      if ( $1 >= "$year$month$day$previous_hour$min"){
        get_collector_data( "$FLOW_NFDUMP -R $flow_dir/$log");
      }
    }
    else{
      print "Unknow File name format\n";
    }
    $begin_time = check_time();

    #test 100
    if ( $argv->{CIRCLES} ){
      if ( $circles > $argv->{CIRCLES} ){
        exit;
      }
      else{
        print "File number: $circles\n";
      }
      $circles++;
    }
  }

  return 1;
}

#**********************************************************
=head2 processing($attr) - Processin by traffic

  Arguments:
    $attr
      START
      STOP

=cut
#**********************************************************
sub processing{
  my ($attr) = @_;

  $Ipn->unknown_add( { UNKNOWN_IPS => $Ipn->{IN}, NAS_ID => 1 } );

  $Ipn->traffic_agregate_nets();

  my ($intervals, $tp_interval) = $Ipn->get_interval_params();

  my $ips = $Ipn->{USERS_IPS};
  #my $ips_interim   = $Ipn->{INTERIM};
  my $logins = $Ipn->{USERS_INFO}->{LOGINS};
  my $tps = $Ipn->{USERS_INFO}->{TPS};
  my $session_ids = $Ipn->{SESSIONS_ID};
  my $interim_times = $Ipn->{INTERIM_TIME};

  my %RAD = ();
  my $registred = '';
  my @MULTI_QUERY = ();

  foreach my $ip ( sort keys %{$session_ids} ){
    if ( length( $ip ) < 2 ){ next; }
    my $uid = $ips->{$ip};
    my $login = $logins->{$uid};
    my $tariif_plan = $tps->{$uid} || 0;
    my $session_id = $session_ids->{$ip};
    my $interium_time = $interim_times->{$session_id} || 0;
    my $total_in = 0;
    my $total_out = 0;
    my $extended = '';
    my $total_user_sum = 0;

    # Get interval ID
    my $user_tp_interval = (defined( $tp_interval->{$tariif_plan} )) ? $tp_interval->{$tariif_plan} : 0;

    #Time tariffication
    if ( $intervals->{$user_tp_interval}->{TIME_TARIFF} ){
      my $time_tariff = $intervals->{$user_tp_interval}->{TIME_TARIFF};
      $total_user_sum = ($time_tariff > 0) ? $interium_time / 60 / 60 * $time_tariff : 0;
      $extended .= sprintf( "Time| Price:%5s %d=%f\n", $time_tariff, $interium_time, $total_user_sum );
    }

    my $ip_addr;
    if ( length( $ip ) > 10 ){
      my ($ip_, undef) = unpack( 'N4N4', $ip );
      $ip_addr = int2ip( $ip_ );
    }
    else{
      $ip_addr = int2ip( $ip );
    }

    my %TRAFFIC_CLASS_SUM = ();

    #parse  traffic stats
    if ( $Ipn->{INTERIM}{$ip} ){
      my $ip_stats = $Ipn->{INTERIM}{$ip};
      # Traffic type, traffic count
      # $k - traffic Class
      # $v - value
      while (my ($traffic_class, $v) = each %{$ip_stats}) {
        my $in = (defined( $v->{IN} )) ? int( $v->{IN} ) : 0;
        my $out = (defined( $v->{OUT} )) ? int( $v->{OUT} ) : 0;

        $TRAFFIC_CLASS_SUM{$traffic_class}{IN} = $in;
        $TRAFFIC_CLASS_SUM{$traffic_class}{OUT} = $out;

        $total_in += $in;
        $total_out += $out;
        my $sum_in = 0;
        my $sum_out = 0;

        #Get price and calculate traffic
        my $OCTETS_DIRECTION = $Ipn->{$ip}{OCTET_DIRECTION};
        my $price_in = (defined( $intervals->{$user_tp_interval}->{ZONES}->{$traffic_class}->{PriceIn} )) ? $intervals->{$user_tp_interval}->{ZONES}->{$traffic_class}->{PriceIn} : 0;
        my $price_out = (defined( $intervals->{$user_tp_interval}->{ZONES}->{$traffic_class}->{PriceOut} )) ? $intervals->{$user_tp_interval}->{ZONES}->{$traffic_class}->{PriceOut} : 0;

        # Work with prepaid traffic
        if ( defined( $intervals->{$user_tp_interval}->{ZONES}->{$traffic_class}->{PREPAID_TSUM} ) ){

          my $used_traffic;
          if ( $argv->{PREPAID_STORE} ){
            ($used_traffic) = $Ipn->traffic_user_get2(
              {
                UID             => $uid,
                ACTIVATE        => $Ipn->{USERS_INFO}->{ACTIVATE}->{$uid},
                JOIN_SERVICE    => $Ipn->{USERS_INFO}->{JOIN_SERVICE}->{$uid},
                TRAFFIC_IN      => $in,
                TRAFFIC_OUT     => $out,
                TRAFFIC_ID      => $traffic_class,
                INTERVAL_ID     => $user_tp_interval,
                ACCT_SESSION_ID => $session_id,
                START           => $attr->{START} || "$DATE $TIME",
                STOP            => $attr->{STOP} || "$DATE $TIME",
              }
            );
          }
          else{
            ($used_traffic) = $Ipn->traffic_user_get(
              {
                UID          => $uid,
                ACTIVATE     => $Ipn->{USERS_INFO}->{ACTIVATE}->{$uid},
                JOIN_SERVICE => $Ipn->{USERS_INFO}->{JOIN_SERVICE}->{$uid},
                TRAFFIC_IN   => $in,
                TRAFFIC_OUT  => $out,
                TRAFFIC_ID   => $traffic_class
              }
            );
          }
          my $online = 0;

          if ( $OCTETS_DIRECTION == 1 ){
            $used_traffic->{$traffic_class}{TRAFFIC_SUM} = ($used_traffic->{$traffic_class} && $used_traffic->{$traffic_class}{TRAFFIC_IN}) ? $used_traffic->{$traffic_class}{TRAFFIC_IN} : 0;
            $online = $in;
          }

          #Sent / Out
          elsif ( $OCTETS_DIRECTION == 2 ){
            $used_traffic->{$traffic_class}{TRAFFIC_SUM} = ($used_traffic->{$traffic_class}{TRAFFIC_OUT}) ? $used_traffic->{$traffic_class}{TRAFFIC_OUT} : 0;
            $online = $out;
          }
          else{
            $used_traffic->{$traffic_class}{TRAFFIC_SUM} = ($used_traffic->{$traffic_class}{TRAFFIC_IN}) ? $used_traffic->{$traffic_class}{TRAFFIC_OUT} + $used_traffic->{$traffic_class}{TRAFFIC_IN} : 0;
            $online = ($in + $out);
          }

          my $prepaid = $intervals->{$user_tp_interval}->{ZONES}->{$traffic_class}->{PREPAID_TSUM};
          if ( $debug > 1 ){
            print "Prepaid traffic: $prepaid CLASS: $traffic_class USED: $used_traffic->{$traffic_class}{TRAFFIC_SUM}\n";
          }

          #Check lost of prepaid traffic in log
          if ( $used_traffic->{$traffic_class}{TRAFFIC_SUM} < $prepaid ){

            #if online have more then log + online make last traffic calculation
            if ( $used_traffic->{$traffic_class}{TRAFFIC_SUM} + $online / $conf{MB_SIZE} > $prepaid ){
              my $not_prepaid = ($used_traffic->{$traffic_class}{TRAFFIC_SUM} * $conf{MB_SIZE} + $online) - $prepaid * $conf{MB_SIZE};
              my $sent = ($OCTETS_DIRECTION == 2) ? $not_prepaid : $not_prepaid / 2;
              my $recv = ($OCTETS_DIRECTION == 1) ? $not_prepaid : $not_prepaid / 2;
              $sum_in = $recv / $conf{MB_SIZE} * $price_in if ($price_in > 0);
              $sum_out = $sent / $conf{MB_SIZE} * $price_out if ($price_out > 0);
            }

            $price_in = 0;
            $price_out = 0;
          }
        }

        $sum_in += $in / $conf{MB_SIZE} * $price_in if ($price_in > 0);
        $sum_out += $out / $conf{MB_SIZE} * $price_out if ($price_out > 0);

        my $traf_class_sum = $sum_in + $sum_out;
        $total_user_sum += $traf_class_sum;

        if ( $uid > 0 && $in + $out > 0 ){
          push @MULTI_QUERY, [
            $uid,
            $attr->{START} || "$DATE $TIME",
            $attr->{STOP} || "$DATE $TIME",
            $traffic_class,
            $in || 0,
            $out || 0,
            $Ipn->{$ip}{NAS_ID} || $NAS_ID,
            $ip,
            $user_tp_interval,
            $traf_class_sum,
            $session_id,
          ];
        }

        $extended .= sprintf( "   %d| %10s| %10s| Price:%5s%5s = %f/%f=%f\n", $traffic_class, $in, $out, $price_in, $price_out,
          $sum_in, $sum_out, $traf_class_sum );
      }
    }

    #If user Don't have interium traffic
    elsif ( $total_user_sum > 0 && $uid > 0 ){
      #Don't make alive for ip withot traffic
      if ( $argv->{ADD_TRAFFIC_ONLY} ){
        next;
      }
    }
    elsif ( $argv->{ADD_TRAFFIC_ONLY} ){
      print "Skip add db for no traffic: IP: $ip \n" if ($debug > 2);
      next;
    }

    #Put user data to database
    if ( $uid > 0 ){
      $Ipn->{$ip}{IN} = (!$Ipn->{$ip}{IN}) ? $total_in : $Ipn->{$ip}{IN} + $total_in;
      $Ipn->{$ip}{OUT} = (!$Ipn->{$ip}{OUT}) ? $total_out : $Ipn->{$ip}{OUT} + $total_out;

      %RAD = (
        NAS_PORT              => 0,
        INTERIUM_INBYTE       => $total_in,
        INTERIUM_OUTBYTE      => $total_out,
        INBYTE                => $Ipn->{$ip}{IN} || 0,
        OUTBYTE               => $Ipn->{$ip}{OUT} || 0,
        ACCT_INPUT_GIGAWORDS  => $Ipn->{$ip}{ACCT_INPUT_GIGAWORDS} || 0,
        ACCT_OUTPUT_GIGAWORDS => $Ipn->{$ip}{ACCT_OUTPUT_GIGAWORDS} || 0,
        INBYTE2               => ($TRAFFIC_CLASS_SUM{1}{IN}) ? $TRAFFIC_CLASS_SUM{1}{IN} : 0,
        OUTBYTE2              => ($TRAFFIC_CLASS_SUM{1}{OUT}) ? $TRAFFIC_CLASS_SUM{1}{OUT} : 0,
        FRAMED_IP_ADDRESS     => $ip_addr,
        USER_NAME             => $login,
        ACCT_SESSION_ID       => $session_id,
        ACCT_SESSION_TIME     => 0,
        ACCT_STATUS_TYPE      => 'Alive',
      );

      if ( $Ipn->{INTERIM}{$ip} ){
        $Ipn->acct_update(
          {
            %RAD,
            NAS_ID => $Ipn->{$ip}{NAS_ID} || $NAS_ID,
            SUM    => sprintf( "%.6f", $total_user_sum || 0 ),
            UID    => $uid
          }
        );
      }

      #Hangup users with negative deposit
      if ( !$Ipn->{USERS_INFO}->{PAYMENT_TYPE}->{$uid}
        && defined( $Ipn->{USERS_INFO}->{DEPOSIT}->{$uid} )
        && $Ipn->{USERS_INFO}->{DEPOSIT}->{$uid} < 0 )
      {
        my $ret = $Nas_cmd->hangup(
          { NAS_TYPE => 'ipoe', NAS_ID => $Ipn->{$ip}{NAS_ID} || $NAS_ID },
          0,
          $login,
          {
            #%{$nas_info},
            ACCT_SESSION_ID      => $session_id,
            CALLING_STATION_ID   => 'traffic2sql',
            FRAMED_IP_ADDRESS    => $ip_addr,
            NETMASK              => 32,
            UID                  => $uid,
            DEBUG                => $debug,
            #FILTER_ID            => $online->{filter_id},
            #OLD_TP_ID            => $online->{tp_id},
            ACCT_TERMINATE_CAUSE => 10,
            INTERNET             => in_array('Internet', \@MODULES)
          }
        );

        if($debug) {
          print "Hangup: $login RESULT: $ret \n\n";
        }
      }
    }

    $registred .= sprintf( "%6s| %14s| %10s| %10s| %10s| %10s| %5s|\n%s", $uid, $RAD{FRAMED_IP_ADDRESS}, $RAD{INBYTE},
      $RAD{OUTBYTE}, $total_in, $total_out, $interium_time, $extended ) if ($debug > 0);
  }

  #Add user pkg traffic
  $Ipn->traffic_add_user( { MULTI_QUERY => \@MULTI_QUERY } );

  if ( $Ipn->{errno} ){
    print "Traffic add error\n";
    exit;
  }

  if ( $debug > 0 || $argv->{LOG_FILE} ){
    my $GT = '';

    if ( $begin_time > 0 ){
      Time::HiRes->import( qw(gettimeofday) );
      my $end_time = Time::HiRes::gettimeofday();
      my $gen_time = $end_time - $begin_time;
      $GT = sprintf( " GT: %2.5f", $gen_time );
    }

    my $log_message = '';
    if ( $debug > 0 ){
      $Ipn->{TRAFFIC_SUM} = 0 if (!$Ipn->{TRAFFIC_SUM});
      $Ipn->{UNKNOWN_TRAFFIC_SUM} = 0 if (!$Ipn->{UNKNOWN_TRAFFIC_SUM});
      my $speed = int2byte( ($Ipn->{TRAFFIC_SUM} + $Ipn->{UNKNOWN_TRAFFIC_SUM}) / $attr->{SESSION_INTERVAL} );
      my $output = "$registred$GT/Query: $Ipn->{db}->{queries_count} Stats Rows: $Ipn->{TRAFFIC_ROWS}/" . int2byte( $Ipn->{TRAFFIC_SUM} ) . " Unknown: $Ipn->{UNKNOWN_TRAFFIC_ROWS}/" . int2byte( $Ipn->{UNKNOWN_TRAFFIC_SUM} ) . " Speed: $speed/sec.\n";
      $log_message .= $output;
    }

    $log_message .= "$attr->{LOG} $GT Query: $Ipn->{db}->{queries_count} ROWS: $Ipn->{TOTAL_FLOWS}";
    $Log->log_print( 'LOG_INFO', '', "$log_message" );

    $Ipn->{TRAFFIC_SUM} = 0;
    $Ipn->{UNKNOWN_TRAFFIC_SUM} = 0;
  }

  return 1;
}

#**********************************************************
=head2 get_collector_data($log, $attr) Get data from collectors

  Arguments:
    $log

=cut
#**********************************************************
sub get_collector_data{
  my ($log) = @_;

  print "$log\n" if ($debug > 1);

  $Ipn->traffic_agregate_clean();
  $Ipn->{TOTAL_FLOWS} = 0;
  my %DATA = ();
  if ($NAS_IDS =~ /^\d+$/){
    $DATA{NAS_ID} = $NAS_IDS;
  }
  my %virus_allert_ips = ();

  open(my $fh, '-|', $log) || die "Can't open log file '$log' $!\n";

  while (<$fh>) {
    # flow-capture
    if ( /(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/ ){
      $Ipn->{TOTAL_FLOWS}++;
      print "-$1.$2.$3.$4 $5.$6.$7.$8 $9 $10 $11 $12\n" if ($debug > 7);

      $DATA{SIZE} = $12;
      if ( $argv->{VIRUS_ALERT} && $DATA{SIZE} < 150 ){
        $virus_allert_ips{ (16777216 * $1 + 65536 * $2 + 256 * $3 + $4) }++;
        next;
      }

      ($DATA{SRC_IP}, $DATA{SRC_PORT}) = (16777216 * $1 + 65536 * $2 + 256 * $3 + $4, int( $10 ));
      ($DATA{DST_IP}, $DATA{DST_PORT}) = (16777216 * $5 + 65536 * $6 + 256 * $7 + $8, int( $11 ));

      $DATA{PROTOCOL} = $9;
      #$DATA{IF_NAME}  = '0';

      $Ipn->traffic_agregate_users( { %DATA, DEBUG => $debug, TRAFFIC_CLASS =>
          (defined( $argv->{TRAFFIC_CLASS} ) ? $argv->{TRAFFIC_CLASS} : undef) } );
    }
    elsif (/(\d{4})-(\d{2})-(\d{2}).(\d{2}):(\d{2}):(\d{2}).(\d+).(\w+)(\s+)(\w+).(\w+)(\s+)(\S+)(\s+)->(\s+)(\S+)(\s+)(\S+)(\s+)->(\s+)(\S+)(\s+)(\d+)(\s+)(\d+)/) {
      # example NFSEN: 2023-01-09 13:34:41.620 INVALID  Ignore UDP  8.8.8.8:53 ->  195.158.11.242:1029 8.8.8.8:53 -> 10.0.0.176:1029 2826  0
      $Ipn->{TOTAL_FLOWS}++;
      print "$1.$2.$3 $4:$5:$6 $10 $11 $13 $16 $18 $21 $23 $25\n" if ($debug > 7);

      my ($src_ip, $src_port) =  split(/\:/, $13);
      my ($src_ip1, $src_ip2, $src_ip3, $src_ip4) =  split(/\./, $src_ip);
      $DATA{SRC_IP} = (16777216 * $src_ip1 + 65536 * $src_ip2 + 256 * $src_ip3 + $src_ip4);
      $DATA{SRC_PORT} = $src_port;

      my ($dst_ip, $dst_port) =  split(/\:/, $16);
      my ($dst_ip1, $dst_ip2, $dst_ip3, $dst_ip4) =  split(/\./, $dst_ip);
      $DATA{DST_IP} = (16777216 * $dst_ip1 + 65536 * $dst_ip2 + 256 * $dst_ip3 + $dst_ip4);
      $DATA{DST_PORT} = $dst_port;

      $DATA{SIZE} = $23 + $25;
      # $DATA{PROTOCOL} = $11;
      $DATA{START} = "$1-$2-$3 $4:$5:$6";
      $DATA{STOP} = "$1-$2-$3 $4:$5:$6";

      $DATA{SRC_PORT} = 0 if ($DATA{SRC_PORT} !~ /^\d+$/);
      $DATA{DST_PORT} = 0 if ($DATA{DST_PORT} !~ /^\d+$/);

      $Ipn->traffic_add_details(\%DATA);
    }
    #Ipcad log analize
#Depricated colletions
#    elsif ( / (\d+)\.(\d+)\.(\d+)\.(\d+)[ |\t]+(\d+)\.(\d+)\.(\d+)\.(\d+)[ |\t]+(\d+)[ |\t]+(\d+)[ |\t]+(\d+)[ |\t]+(\d+)[ |\t]+(\d+)[ |\t]+(\S+)/ ){
#      ($DATA{SRC_IP}, $DATA{SRC_PORT}) = (16777216 * $1 + 65536 * $2 + 256 * $3 + $4, $11);
#      ($DATA{DST_IP}, $DATA{DST_PORT}) = (16777216 * $5 + 65536 * $6 + 256 * $7 + $8, $12);
#      $DATA{SIZE} = $10;
#      $DATA{PROTOCOL} = 0;
#      $DATA{SRC_PORT} = 0 if ($DATA{SRC_PORT} !~ /^\d+$/);
#      $DATA{DST_PORT} = 0 if ($DATA{DST_PORT} !~ /^\d+$/);
#
#      #$DATA{NAS_ID}=$NAS_ID;
#      if ( $14 ){
#        $DATA{IF_NAME} = $14;
#      }
#
#      $Ipn->traffic_agregate_users( { %DATA, DEBUG => $debug } );
#    }
  }
  close( $fh );

  if($Ipn->{USERS_TRAFFIC}) {
    $Ipn->traffic_add_details( \%DATA, { USERS_TRAFFIC => $Ipn->{USERS_TRAFFIC} } );
  }

  if ( $argv->{VIRUS_ALERT} ){
    my $virus_allert_log = '';
    my $DATETIME = strftime( "%Y-%m-%d %H:%M:%S", localtime( time ) );
    while (my ($k, $v) = each %virus_allert_ips) {
      my $user = ($Ipn->{USERS_IPS}{$k}) ? $Ipn->{USERS_INFO}{LOGINS}->{ $Ipn->{USERS_IPS}{$k} } . ' ' . int2ip( $k ) : '!!! ' . int2ip( $k );
      $virus_allert_log .= "$DATETIME $user $v\n" if ($v > int( $argv->{VIRUS_ALERT} ));
    }

    if ( $virus_allert_log ne '' ){
      open( $fh, '>>', "$flow_dir/virus_allert.log" ) || die "Can't open file '$flow_dir/virus_allert.log' $!\n";
      print $fh $virus_allert_log;
      close( $fh );
    }
  }


  return 1;
}

#**********************************************************
=head2 get_collector_data($log, $attr) Get data from collectors

=cut
#**********************************************************
sub help{

  print "ABillS Ic collector
  traffic2sql [NAS_IDS] [Options]
   NAS_IDS    - IDS of NAS servers 1,2,3 or 1-100
   NAS_TYPE   - Nas types
 Options:
   log        - Log file for trafd
   INTERFACE  - Interface for trafd
   flowdir    - Folder where stored flow-capture result files
   FLOWTOOLS_IP_AGGREGATION - Aggregate Netflow files to ip.
   FLOWTOOLS_FT_BACKUP=dir - Backup old flow-tools ft* file. For debug only
   DEBUG      - Set debug mode (1,2)
   DETAIL_ONLY- Make IP detalisation only
   UNKNOWN_IP_LOG - Enable unknown ip login
   PREPAID_STORE - Use alternative prepaid store for prepaid traffic colection.
   TCOLLECTOR - Total Collector mode. Collect all data to SQL without analysation
   AMON_ALIVE - Second for Amon Alive Alive interval (default value 120).
   VIRUS_ALERT=1000 - Count of small PKG
   LOG_FILE   - Debug log file for traffic2sql
   TRAFFIC_CLASS - Add all traffic as TRAFFIC_CLASS
   ADD_TRAFFIC_ONLY - Add only traffic packets
   CIRCLES=xx - Grab only [CIRCLES] files in one execute
   TRANSACTION- Use transaction processing

   -d         - Deamon mode
   -fg        - foreground mode

   FLOW_CAT    - Flow tools flow-cat location
   FLOW_PRINT  - Flow tools flow-print location
   FLOW_NFDUMP - Flow tools nfdump location\n

";

  return 1;
}

1
