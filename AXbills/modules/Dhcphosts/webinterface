#!perl
=head1 NAME

  Dhcphosts

  Error ID: 1xx

=cut

use strict;
use warnings FATAL => 'all';
use Dhcphosts;
use AXbills::Base qw(ip2int int2ip in_array tpl_parse cmd);
use AXbills::Filters;
use Socket;
use Nas;

our(
  $db,
  %conf,
  $admin,
  $html,
  %AUTH,
  %lang,
  $var_dir,
  @bool_vals,
  @status,
  %permissions,
);

my $Dhcphosts = Dhcphosts->new( $db, $admin, \%conf );
my $Nas       = Nas->new( $db, \%conf, $admin );

#*******************************************************************
=head2 dhcphosts_user_del() Delete user from module

=cut
#*******************************************************************
sub dhcphosts_user_del{
  my ($uid) = @_;

  $Dhcphosts->{UID} = $uid;
  $Dhcphosts->host_del( { UID => $uid } );

  return 0;
}

#*******************************************************************
=head2 dhcphosts_periodic($attr)

=cut
#*******************************************************************
sub dhcphosts_periodic{
  my ($attr) = @_;

  my $debug = $attr->{DEBUG} || 0;
  my $debug_output = '';
  $debug_output .= "Dhcphosts: Dhcp reconfigure\n" if ($debug > 1);

  dhcphosts_config({
    NETWORKS   => '-',
    reconfig => 1,
    QUITE    => 1,
    DEBUG    => $attr->{DEBUG}
  });

  $DEBUG .= $debug_output;
  return $debug_output;
}

#*******************************************************************
=head2 dhcphosts_mac_static()

=cut
#*******************************************************************
sub dhcphosts_mac_static{

  if ( $FORM{MAKE} ){
    file_op({ WRITE    => 1,
              FILENAME => 'Dhcphosts_dhcphosts_ipguard_static.tpl',
              PATH     => $conf{TPL_DIR},
              CONTENT  => $FORM{ETHERS}
           });
  }

  my $ethers_content = $html->tpl_show( _include( 'dhcphosts_ipguard_static', 'Dhcphosts' ), { },
    { OUTPUT2RETURN => 1 } );
  $html->tpl_show( _include( 'dhcphosts_ipguard', 'Dhcphosts' ), { ETHER_CONTENT => "$ethers_content", } );

  return 1;
}

#*******************************************************************
=head2 dhcphosts_mac_block_show()

=cut
#*******************************************************************
sub dhcphosts_mac_block_show{
  #my ($attr) = @_;
  #my $debug = $attr->{DEBUG} || 0;

  my $ethers_content = "# $DATE $TIME\n# ABillS IPGuard CONFIG: \n";

  my @pair_status = ('ACCEPT', 'DENY');

  my %PARAMS = ();

  if ( defined( $conf{DHCPHOSTS_DEPOSITCHECK} ) ){
    #$PARAMS{DEPOSIT} = '_SHOW';
  }

  if ( defined( $conf{DHCPHOSTS_EXT_DEPOSITCHECK} ) ){
    $PARAMS{EXT_DEPOSIT} = '_SHOW';
  }

  my $list = $Dhcphosts->hosts_list({
    IP          => '_SHOW',
    MAC         => '_SHOW',
    LOGIN       => '_SHOW',
    EXPIRE      => '_SHOW',
    STATUS      => '_SHOW',
    CREDIT      => '_SHOW',
    DEPOSIT     => '_SHOW',
    EXT_DEPOSIT => '_SHOW',
    DELETED     => 0,
    PAGE_ROWS   => 1000000,
    %PARAMS,
    COLS_NAME   => 1
  });

  #Get Templates default for IP Guard
  my $DENY_TEMPLATE = ($conf{DHCPHOSTS_IPGUARD_DENY_TPL}) ? $conf{DHCPHOSTS_IPGUARD_DENY_TPL} : '';
  my $ACCEPT_TEMPLATE = ($conf{DHCPHOSTS_IPGUARD_ACCEPT_TPL}) ? $conf{DHCPHOSTS_IPGUARD_ACCEPT_TPL} : '%MAC% %IP% # %LOGIN%; %STATUS%; %DEPOSIT%';

  foreach my $line ( @{$list} ){

    #Block
    if ( $line->{status} eq '' ){
      next;
    }
    elsif ( !defined( $line->{ip} ) ){
      print 'Warning: IP: ' . ($line->{ip} || 'No ip') . ' MAC: ' . ($line->{mac} || 'No MAC') . " Record don't have users (ID: $line->{id})\n";
      next;
    }

    #Chack status
    my $status = $line->{status};
    my $deposit = 0;

    if ( defined( $conf{DHCPHOSTS_EXT_DEPOSITCHECK} ) ){
      $deposit = $line->{ext_deposit};
    }
    elsif ( defined( $conf{DHCPHOSTS_DEPOSITCHECK} ) ){
      $deposit = $line->{deposit} + $line->{credit};
    }

    $deposit = 0 if (!$deposit);

    my %INFO = (
      IP      => ($conf{DHCPHOSTS_IPGUARD_FORMAT} && $conf{DHCPHOSTS_IPGUARD_FORMAT} eq 'MAC') ? '0.0.0.0' : $line->{ip}
      ,
      MAC     => $line->{mac},
      LOGIN   => $line->{login},
      DEPOSIT => $deposit,
      UID     => $line->{uid},
      EXPIRE  => $line->{expire}
    );

    #DENY
    if ( $status == 1
      || ((defined( $conf{DHCPHOSTS_DEPOSITCHECK} ) && $conf{DHCPHOSTS_DEPOSITCHECK} =~ /^\d+$/  && $deposit < $conf{DHCPHOSTS_DEPOSITCHECK})
          || (defined( $conf{DHCPHOSTS_EXT_DEPOSITCHECK} ) && $conf{DHCPHOSTS_EXT_DEPOSITCHECK} =~ /^\d+$/  && $deposit < $conf{DHCPHOSTS_EXT_DEPOSITCHECK})) ){
      next if ($DENY_TEMPLATE eq '');
      $ethers_content .= tpl_parse(
        $DENY_TEMPLATE,
        {
          STATUS => $pair_status[1],
          %INFO
        }
      );
    }

    #Allow
    else{
      next if ($ACCEPT_TEMPLATE eq '');
      $ethers_content .= tpl_parse(
        $ACCEPT_TEMPLATE,
        {
          STATUS => $pair_status[$status],
          %INFO
        }
      );
    }

    $ethers_content .= "\n";
  }

  $ethers_content .= $html->tpl_show( _include( 'dhcphosts_ipguard_static', 'Dhcphosts' ), undef,
    { OUTPUT2RETURN => 1 } );

  return $ethers_content;
}

#*******************************************************************
=head2 dhcphosts_mac_block_make($attr)

=cut
#*******************************************************************
sub dhcphosts_mac_block_make{
  my ($attr) = shift;

  if ( !$attr->{ETHER_CONTENT} ){
    $attr->{ETHER_CONTENT} = dhcphosts_mac_block_show();
  }

  my $debug = $attr->{DEBUG} || 0;
  my $debug_output = '';
  $debug_output = "$attr->{ETHER_CONTENT}\n" if ($debug > 1);
  $DEBUG .= $debug_output;

  if ( $debug > 4 ){
    return 1;
  }

  if ( open( my $fh, '>', "$var_dir/ipguard" ) ){
    print $fh "$attr->{ETHER_CONTENT}";
    close( $fh );
  }
  else{
    if ( $user->{UID} ){
      print "Content-Type: text/html\n\n";
    }

    print "Can't open '$var_dir/ipguard' $!\n";
  }

  $DEBUG .= $debug_output;

  return $debug_output;
}

#*******************************************************************
=head2 dhcphosts_mac_block()

=cut
#*******************************************************************
sub dhcphosts_mac_block{
  if ( $FORM{MAKE} ){
    my $ret;
    if ( -e "/usr/local/etc/rc.d/ipguard.sh" || -e "$var_dir/ipguard" ) {
      $ret = dhcphosts_mac_block_make( $FORM{ETHER_CONTENT} );
    }
    if ( $ret eq '1' ){
      print $html->message( 'info', $lang{INFO}, "$lang{CHANGED} '$var_dir/ipguard'" );
    }
    else{
      print $html->message( 'err', $lang{ERROR}, "$ret" );
    }
  }

  my $ethers_content = dhcphosts_mac_block_show();
  $html->tpl_show(
    _include( 'dhcphosts_ipguard', 'Dhcphosts' ),
    {
      ETHER_CONTENT => "$ethers_content",
      FILE          => "$var_dir/ipguard"
    }
  );

  return 1;
}

#*******************************************************************
=head2 dhcphosts_monitor() - Show dhcpd.leases information

=cut
#*******************************************************************
sub dhcphosts_monitor{

  if ( $AUTH{dhcp} && !$conf{DHCPHOSTS_LEASES} ){
    $conf{DHCPHOSTS_LEASES} = 'db';
  }

  if ( !$conf{DHCPHOSTS_LEASES} && !$AUTH{dhcp} ){
    print $html->message( 'err', $lang{ERROR}, "$lang{NOT_EXIST} " . '$conf{DHCPHOSTS_LEASES}' );
    return 0;
  }

  if ( $FORM{ping} ){
    host_diagnostic( $FORM{ping} );
  }
  elsif ( $FORM{mac_info} ){
    my $result = get_oui_info( $FORM{mac_info} );
    $html->message( 'info', $lang{INFO}, "MAC: $FORM{mac_info}\n $result" );
  }
  elsif ( $FORM{del} && $FORM{COMMENTS}  ){
    $Dhcphosts->leases_clear( \%FORM );
    $html->message( 'info', $lang{INFO}, "$lang{DELETED}" );
  }

  #Get info from DB
  if ( $conf{DHCPHOSTS_LEASES} eq 'db' ){
    my %state_hash = (
      'unknown'        => 0,
      'free'           => 1,
      "$lang{ACTIV}"   => 2,
      'abandoned'      => 3,
      "$lang{EXPIRED}" => 4
    );

    my %state_hash_rev = reverse %state_hash;

    form_search({
      SIMPLE => {
        "$lang{LOGIN}"          => 'LOGIN',
        "$lang{HOSTS_HOSTNAME}" => 'HOSTNAME',
        'IP'                    => 'IP',
        "$lang{NAS}"            => 'NAS_ID',
        'MAC'                   => 'HARDWARE',
        'VLAN'                  => 'VID',
        "$lang{EXPIRE}"         => 'ENDS',
        'CIRCUIT_ID'            => 'CIRCUIT_ID',
        'REMOTE_ID'             => 'REMOTE_ID',
        'GUEST',                => 'GUEST',
        'STATE'                 => { '' => $lang{ALL}, %state_hash_rev }
      },
    });

    my AXbills::HTML $table;
    my $dhcp_list;

    ($table, $dhcp_list) = result_former({
      INPUT_DATA      => $Dhcphosts,
      FUNCTION        => 'leases_list',
      BASE_FIELDS     => 12,
      DEFAULT_FIELDS  => 'LOGIN,IP,START,HARDWARE,HOSTNAME,END,STATE,PORT,VLAN,FLAG,NAS_ID',
      HIDDEN_FIELDS   => 'REMOTE_ID,CIRCUIT_ID',
      FUNCTION_FIELDS => 'ping,del',
      EXT_TITLES      => {
        'start'      => $lang{START},
        'hardware'   => 'MAC',
        'hostname'   => $lang{HOSTNAME},
        'ends'       => $lang{END},
        'port'       => $lang{PORTS},
        'vlan'       => 'Vlan',
        'server_vlan'=> 'Server Vlan',
        'nas_id'     => 'NAS',
        'remote_id'  => 'REMOTE ID',
        'circuit_id' => 'CIRCUIT ID',
        'ip'         => 'IP',
        'admin_name' => $lang{ADMIN},
        'dhcp_id'    => 'DHCP ID',
        'flag'       => $lang{GUEST}
      },
      TABLE           => {
        width   => '100%',
        caption => "DHCP Leases ($conf{DHCPHOSTS_LEASES})",
        qs      => $pages_qs,
        pages   => $Dhcphosts->{TOTAL},
        header  => $html->button( "$lang{DEL} $lang{ALL}", "index=$index&del=1",
          { MESSAGE => "$lang{DEL} $lang{ALL}?", class => 'btn btn-secondary' } ) . ' ' . $html->button( "$lang{DEL} $lang{EXPIRED}",
          "index=$index&del=1&ENDED=1", { MESSAGE => "$lang{DEL} $lang{EXPIRED}?", class => 'btn btn-secondary' } ),
        ID      => 'DHCPHOSTS_LEASES',
        EXPORT  => 1,
      }
    });

    $table->{SKIP_FORMER} = 1;
    foreach my $line ( @{$dhcp_list} ){
      my @fields_array = ();

      if ($line->{port} eq '0' ){
        if ( $line->{circuit_id} =~ /0:4:0:([0-9a-f]+):0:([0-9a-f]+)/i ){
          $line->{vlan} = hex( $1 );
          $line->{port} = hex( $2 );
        }
      }
      my $delete = $html->button( 'del', "index=$index&del=1&MAC=$line->{hardware}",
        { TITLE => $lang{DEL}, MESSAGE => "$lang{DEL} [$line->{hardware}] ?", class => 'del' } );

      for ( my $i = 0; $i < 12 + $Dhcphosts->{SEARCH_FIELDS_COUNT} - $table->{HIDDEN_FIELD_COUNT}; $i++ ){
        my $field_name = $Dhcphosts->{COL_NAMES_ARR}->[$i];
        if ( $field_name eq 'login' && $line->{uid} ){
          $line->{login} = $html->button( $line->{login}, "index=15&UID=$line->{uid}" );
        }
        elsif ( $field_name eq 'state' ){
          $line->{$field_name} = $html->color_mark( $state_hash_rev{ $line->{state} },
              ($line->{state} > 2) ? $_COLORS[6] : $_COLORS[9] );
        }
        elsif ( $field_name eq 'flag' ){
          $line->{$field_name} = $html->color_mark( $bool_vals[ $line->{flag} ],
              ($line->{flag}) ? $_COLORS[6] : $_COLORS[9] ),;
        }
        elsif ( $field_name eq 'hardware' ){
          $line->{$field_name} = $html->color_mark($line->{$field_name}, 'code') . ' ' . $html->button( $lang{INFO},
            "index=$index&mac_info=$line->{$field_name}&UID=$line->{uid}", { class => 'info' } );
        }
        elsif ( $field_name =~ /deposit/ ){
          $line->{$field_name} = ($line->{$field_name} < 0) ? $html->color_mark( $line->{$field_name},
              $_COLORS[6] )                                 : $line->{$field_name};
        }
        elsif($field_name eq 'ip') {
          $line->{ip} = int2ip($line->{ip});
        }

        push @fields_array, $line->{$field_name};
      }

      my $ping = $html->button( 'P', "index=$index&ping=$line->{ip}", { TITLE => 'ping', BUTTON => 1 } );
      $table->addrow( @fields_array, $ping .' '. $delete );
    }

    print $table->show();

    if ( !$admin->{MAX_ROWS} ){
      $table = $html->table({
        width      => '100%',
        rows       => [ [ "$lang{TOTAL}:", $html->b( $Dhcphosts->{TOTAL} ) ] ],
        rowcolor   => 'even'
      });
      print $table->show();
    }

    return 1;
  }

  #Get info from dhcpd.leased
  my $dhcp_hash = leaseparse( $conf{DHCPHOSTS_LEASES} );

  $dhcp_hash = {} if (!$dhcp_hash || !(ref $dhcp_hash eq 'HASH'));

  #Get user info from DB
  $LIST_PARAMS{PAGE_ROWS} = 100000;
  $LIST_PARAMS{IPS} = join( ", ", keys %{$dhcp_hash} );

  my $hosts_list = $Dhcphosts->hosts_list({
    IP        => '_SHOW',
    MAC       => '_SHOW',
    LOGIN     => '_SHOW',
    EXPIRE    => '_SHOW',
    HOSTNAME  => '_SHOW',
    %LIST_PARAMS,
    COLS_NAME => 1
  });

  my $table = $html->table({
    width      => '100%',
    caption    => "$lang{HOSTS}",
    title      =>
      [ $lang{USER}, 'IP', $lang{START}, "MAC", $lang{HOSTS}, "abandoned", $lang{STATE}, "remote-id", "circuit_id", "-" ],
    ID         => 'MONITOR_DHCP'
  });

  $table->{rowcolor} = $_COLORS[0];
  $table->{extra} = "colspan='9'";
  $table->addrow( "$lang{TOTAL}: $Dhcphosts->{TOTAL}" );
  $table->{extra} = undef;
  $table->{rowcolor} = undef;

  #Get info derect from file
  foreach my $line ( @{$hosts_list} ){
    $table->addrow(
        (!$line->{login}) ? $html->color_mark( $lang{DELETED} . " UID: $line->{uid}", 'text-danger' ) : $html->button(
          $line->{login}, "index=15&UID=$line->{uid}" ),
      $line->{ip},
      $dhcp_hash->{ $line->{mac} }{starts},
      $dhcp_hash->{ $line->{mac} }{hardware} || $line->{mac},
      $dhcp_hash->{ $line->{mac} }{'client-hostname'},
      $dhcp_hash->{ $line->{mac} }{abandoned},
      $dhcp_hash->{ $line->{mac} }{state},
      $dhcp_hash->{ $line->{mac} }{remote_id},
      $dhcp_hash->{ $line->{mac} }{circuit_id},
      $html->button( 'P', "index=$index&ping=$line->{ip}", { TITLE => 'ping', BUTTON => 1 } )
    );

    delete $dhcp_hash->{ $line->{mac} };
  }

  my @unregistred = sort keys %{$dhcp_hash};
  $table->{rowcolor} = $_COLORS[0];
  $table->{extra} = "colspan='9'";
  $table->addrow( "$lang{NOT_EXIST} $lang{TOTAL}: " . ($#unregistred + 1) );
  $table->{extra} = undef;
  $table->{rowcolor} = undef;

  foreach my $ip ( @unregistred ){
    $table->addrow(
      '', $ip,
      $dhcp_hash->{$ip}{starts},
      $dhcp_hash->{$ip}{hardware},
      $dhcp_hash->{$ip}{'client-hostname'},
      $dhcp_hash->{$ip}{abandoned},
      $dhcp_hash->{$ip}{state},
      $dhcp_hash->{$ip}{remote_id},
      $dhcp_hash->{$ip}{circuit_id},
      $html->button( 'P', "index=$index&ping=$ip", { TITLE => 'ping', BUTTON => 1 } ),
    );
  }

  print $table->show();

  return 1;
}


#*******************************************************************
=head2 leaseparse($logfile) Parse dhcpd.leases

=cut
#*******************************************************************
sub leaseparse{
  my ($logfile) = @_;
  my (%list, $ip);

  open( my $fh, '<', $logfile ) or do {
    print "Can't read file '$logfile' $!";
    return 0
  };

  my $state = '';
  while (<$fh>) {
    next if (/^#|^$/);

    if ( /^lease (\d+\.\d+\.\d+\.\d+)/ ){
      $ip = $1;
      $list{$ip}{ip} = sprintf( "%s", $ip );
    }

    # $list{$ip}{state} ne 'active' &&
    elsif ( /^\s*binding state ([a-zA-Z]{4,6});/ ){
      $state = sprintf( "%s", $1 );
      $list{$ip}{state} = $state if ($state eq 'active');
    }
    elsif ( /^\s*client-hostname "(.*)";/ ){
      $list{$ip}{'client-hostname'} = sprintf( "%s", $1 );
    }
    elsif ( /^\s*hardware ethernet (.*);/ ){
      $list{$ip}{hardware} = $1;
    }

    m/^\s*starts \d (.*);/ && ($list{$ip}{starts}     = sprintf("%-21s", $1));
    /^\s*(abandoned) . */ && ($list{$ip}{abandoned} = sprintf( " % -19s", $1 ));
    /^\s*option agent.circuit-id ([a-b0-9:]+);/ && ($list{$ip}{circuit_id} = sprintf( "%s", $1 ));
    /^\s*option agent.remote-id ([a-b0-9:]+);/ && ($list{$ip}{remote_id} = sprintf( "%s", $1 ));
  }

  close( $fh );

  return \%list;
}

#*******************************************************************
=head2 dhcphosts_networks()

=cut
#*******************************************************************
sub dhcphosts_networks{
  $Dhcphosts->{ACTION} = 'add';
  $Dhcphosts->{ACTION_LNG} = $lang{ADD};

  if ( $FORM{NAME} and $FORM{NAME} !~ /^[0-9a-zA-Z_\-]+$/ ){
    print $html->message( 'err', $lang{ERROR}, "$lang{HOSTS_NETWORKS_NAME} - '$FORM{NAME}' $lang{ERR_WRONG_DATA}" );
    return 0;
  }

  if ( $FORM{config} ){
    dhcphosts_config( { NETWORKS => $FORM{IDS} } );
    return 0;
  }
  elsif ( $FORM{add} ){
    $FORM{ROUTERS} = '0.0.0.0' if (!$FORM{ROUTERS});
    if (
      $FORM{IP_RANGE_FIRST} && $FORM{IP_RANGE_FIRST} ne '0.0.0.0'
        && ( ip2int( $FORM{IP_RANGE_FIRST} ) < ip2int( $FORM{NETWORK} )
        || ip2int( $FORM{IP_RANGE_FIRST} ) > ip2int( $FORM{NETWORK} ) + (ip2int( '255.255.255.255' ) - ip2int( $FORM{MASK} ))
        || ip2int( $FORM{IP_RANGE_LAST} ) < ip2int( $FORM{NETWORK} )
        || ip2int( $FORM{IP_RANGE_LAST} ) > ip2int( $FORM{NETWORK} ) + (ip2int( '255.255.255.255' ) - ip2int( $FORM{MASK} )))
    )
    {
      $html->message( 'err', $lang{ERROR}, "$lang{ERR_WRONG_RANGE}" );
    }
    else{
      $Dhcphosts->network_add( { %FORM } );
      if ( !$Dhcphosts->{errno} ){
        $html->message( 'info', $lang{ADDED}, "$lang{HOSTS_NETWORKS_NAME} [". ($FORM{NAME} || q{} ). "] " );
      }
    }
  }
  elsif ( $FORM{change} ){
    $FORM{MASK} = ip2int( $FORM{MASK} );
    $FORM{NETWORK} = ip2int( $FORM{NETWORK} );
    $FORM{ROUTERS} = ip2int( $FORM{ROUTERS} );
    $FORM{IP_RANGE_FIRST} = ip2int( $FORM{IP_RANGE_FIRST} );
    $FORM{IP_RANGE_LAST} = ip2int( $FORM{IP_RANGE_LAST} );

    if (
      $FORM{IP_RANGE_FIRST} > 0
        && ( $FORM{IP_RANGE_FIRST} < $FORM{NETWORK}
        || $FORM{IP_RANGE_FIRST} > $FORM{NETWORK} + (ip2int( '255.255.255.255' ) - $FORM{MASK})
        || $FORM{IP_RANGE_LAST} < $FORM{NETWORK}
        || $FORM{IP_RANGE_LAST} > $FORM{NETWORK} + (ip2int( '255.255.255.255' ) - $FORM{MASK}))
    )
    {
      $html->message( 'err', $lang{ERROR}, "$lang{ERR_WRONG_RANGE}" );
    }

    $Dhcphosts->network_change( { %FORM } );

    if ( !$Dhcphosts->{errno} ){
      $html->message( 'info', $lang{CHANGED}, "$lang{CHANGED} [". ($FORM{ID} || q{}) ."] ". ($FORM{NAME} || q{}) );
    }
  }
  elsif ( $FORM{chg} ){
    $Dhcphosts->network_info( $FORM{chg} );

    $Dhcphosts->{ACTION} = 'change';
    $Dhcphosts->{ACTION_LNG} = $lang{CHANGE};
    $FORM{add_form} = 1;

    if ( !$Dhcphosts->{errstr} ){
      $html->message( 'info', $lang{CHANGE}, "$lang{CHANGE} [$FORM{chg}] " );
    }
  }
  elsif ( $FORM{del} && $FORM{COMMENTS} ){
    $Dhcphosts->network_del( $FORM{del} );
    if ( !$Dhcphosts->{errstr} ){
      $html->message( 'info', $lang{DELETED}, "$lang{DELETED} [$FORM{del}] " );
    }
  }

  _error_show( $Dhcphosts );

  $Dhcphosts->{STATIC} = ' checked' if ($Dhcphosts->{STATIC});
  $Dhcphosts->{DISABLE} = ' checked' if ($Dhcphosts->{DISABLE});
  $Dhcphosts->{DENY_UNKNOWN_CLIENTS} = ' checked' if ($Dhcphosts->{DENY_UNKNOWN_CLIENTS});
  $Dhcphosts->{AUTHORITATIVE} = ' checked' if ($Dhcphosts->{AUTHORITATIVE});

  my $net_defaults = $Dhcphosts->network_defaults();

  $Dhcphosts->{PARENT_SEL} = $html->form_select(
    'NET_PARENT',
    {
      SELECTED    => $Dhcphosts->{NET_PARENT},
      SEL_LIST    => $Dhcphosts->networks_list( { PARENT => 0, COLS_NAME => 1, NAME => '_SHOW', PAGE_ROWS => 100000 } ),
      SEL_OPTIONS => { '' => '' },
    }
  );

  if ( $FORM{add_form} ){
    if(in_array('Multidoms', \@MODULES) && $permissions{10}) {
      load_module('Multidoms', $html);

      $net_defaults->{DOMAIN_FORM}=$html->tpl_show(templates('form_row'), {
          ID    => 'DOMAIN_ID',
          NAME  => "Domains:",
          VALUE => multidoms_domains_sel({ DOMAIN_ID => $Dhcphosts->{DOMAIN_ID} }),
        }, { OUTPUT2RETURN => 1 });
    }

    $html->tpl_show( _include( 'dhcphosts_network', 'Dhcphosts' ), { %{$net_defaults}, %{$Dhcphosts} } );
  }

  my @function_fields = ();
  if($permissions{4}) {
    if ($permissions{4}{2}) {
      push @function_fields, 'change',
    }
    if ($permissions{4}{3}) {
      push @function_fields, 'del',
    }
  }

  my %ext_titles = (
    id                   => 'ID',
    name                 => $lang{NAME},
    status               => $lang{STATUS},
    network              => $lang{NETWORK},
    coordinator          => $lang{HOSTS_NETWORKS_COORDINATOR},
    phone                => $lang{PHONE},
    guest_vlan           => 'Guest VLAN',
    net_parent           => $lang{TYPE},
    button_field1        => $lang{USERS},
    button_field2        => $lang{ROUTES},
    ntp                  => 'NTP',
    suffix               => 'Suffix',
    comments             => $lang{COMMENTS},
    deny_unknown_clients => $lang{DENY_UNKNOWN_CLIENTS},
    dns                  => 'DNS',
    ip_range_first       => $lang{FIRST} . ' IP',
    ip_range_last        => $lang{LAST} . ' IP',
    block_network        => $lang{NETWORK},
    dns2                 => 'DNS2',
    vlan                 => 'VLAN',
    static               => $lang{STATIC},
    authoritative        => $lang{AUTHORITATIVE},
    routers              => $lang{DEFAULT_ROUTER},
    block_mask           => $lang{SUBNET},
  );

  if(in_array('Multidoms', \@MODULES) && $permissions{10}) {
    $ext_titles{domain_id}='Domain ID';
  }

  my AXbills::HTML $table;
  ($table) = result_former( {
      INPUT_DATA      => $Dhcphosts,
      FUNCTION        => 'networks_list',
      BASE_FIELDS     => 0,
      DEFAULT_FIELDS  => 'ID,NAME,NETWORK,COORDINATOR,PHONE,STATUS,PARENT,GUEST_VLAN,SPECIAL_FIELD1,BUTTON_FIELD1,BUTTON_FIELD2',
      FUNCTION_FIELDS => join(',', @function_fields),
      STATUS_VALS   => \@status,
      EXT_TITLES    => \%ext_titles,
      FILTER_COLS => {
        net_parent => "_dhcphosts_network_type_filter",
        button_field1 => "_dhcphosts_network_function_fields_former::id,network",
        button_field2 => "_dhcphosts_network_function_fields_former::id,network"
      },
      TABLE      => {
        caption    => $lang{HOSTS_NETWORKS},
        width      => '100%',
        qs         => $pages_qs,
        ID         => 'HOSTS_NETWORKS_TABLE_ID',
        #SELECT_ALL => "dhcp_list:IDS:$lang{SELECT_ALL}",
        MENU       => "$lang{ADD}:index=$index&add_form=1" . ':add',
        EXPORT    => 1,
      },
      MAKE_ROWS       => 1,
      SEARCH_FORMER   => 1,
      SKIP_USER_TITLE => 1,
      MODULE          => 'Dhcphosts',
    }
  );

  print $html->form_main({
    CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
    HIDDEN  => { index        => $index,
                 web_reconfig => 1
    },
    SUBMIT  => { config => "$lang{SHOW} " . ' dhcpd.conf, ' . $lang{RECONFIGURE} },
    NAME    => 'dhcp_list',
    ID      => 'dhcp_list',
  });

  my $dhcphosts_networks_total_table = $html->table({
    width      => '100%',
    rows       => [ [ "$lang{TOTAL}:", $html->b( $Dhcphosts->{TOTAL} ) ] ]
  });

  print $dhcphosts_networks_total_table->show();

  return 1;
}

#**********************************************************
=head2 _dhcphosts_network_type_filter($net_parent) - returns translated name for type of network

=cut
#**********************************************************
sub _dhcphosts_network_type_filter {
  my $net_parent = shift;
  return ($net_parent) ? "$lang{SUBNET}: $net_parent" : "$lang{NETWORK}",
}

#**********************************************************
=head2 _dhcphosts_network_function_fields_former() - forms links on function fields

  This hack is needed cause lack of custom params support in FUNCTION_FIELDS

=cut
#**********************************************************
sub _dhcphosts_network_function_fields_former {
  my ($type, $params) = @_;
  my $id = $params->{VALUES}->{id};

  if ($type == 1){
    return $html->button( "$lang{USERS}",
      "index=" . get_function_index( 'dhcphosts_hosts' ) . "&NETWORK=$id&search=1",
      { BUTTON => 1 }
    );
  }
  elsif ($type == 2){
    return $html->button( "$lang{ROUTES}",
      "index=" . get_function_index( 'dhcphosts_routes' ) . "&NET_ID=$id",
      { class => 'routes' }
    )
  }

  return '';
}

#*******************************************************************
=head2 dhcphosts_hosts($attr)

=cut
#*******************************************************************
sub dhcphosts_hosts{
  my ($attr) = @_;

  if ( $attr->{UID} ){
    return dhcphosts_user( { HOSTS_CALL => 1 } );
  }

  $FORM{search_form} = 1;

  if ( !$LIST_PARAMS{UID} && $FORM{search_form} ){
    my $nas_list = $Nas->list( {
      DOMAIN_ID => $users->{DOMAIN_ID},
      NAS_NAME  => '_SHOW',
      PAGE_ROWS => 10000,
      SHORT     => 1,
      SORT      => 'id',
      COLS_NAME => 1,
    });

    $Dhcphosts->{STATUS_SEL} = $html->form_select(
      'STATUS',
      {
        SELECTED => $FORM{STATUS} || '',
        SEL_HASH => {
          '' => "$lang{ALL}",
          0  => "$lang{ENABLE}",
          1  => "$lang{DISABLE}"
        },
        NO_ID    => 1
      }
    );

    $Dhcphosts->{NETWORKS_SEL} = dhcphosts_network_sel( { SEARCH => 1 } );
    $Dhcphosts->{SWITCH_SEL} = $html->form_select(
      'NAS_ID',
      {
        SELECTED    => $Dhcphosts->{NAS_ID} || $FORM{NAS_ID} || '',
        SEL_LIST    => $nas_list,
        SEL_KEY     => 'id',
        SEL_VALUE   => 'nas_name',
        SEL_OPTIONS => { '' => $lang{ALL} },
      }
    );

    if ( $FORM{MAC} ){
      $FORM{MAC} =~ s/\-/:/g;
    }

    form_search( { SEARCH_FORM => $html->tpl_show( _include( 'dhcphosts_search', 'Dhcphosts' ),
        { %{$Dhcphosts}, %FORM },
        { OUTPUT2RETURN => 1 } ),
        ADDRESS_FORM           => 1
      } );
  }

  result_former( {
    INPUT_DATA      => $Dhcphosts,
    FUNCTION        => 'hosts_list',
    DEFAULT_FIELDS  =>
        ($FORM{UID}) ? 'ID,IP_NUM,HOSTNAME,NETWORK_NAME,MAC,STATUS' : 'ID,LOGIN,IP_NUM,HOSTNAME,NETWORK_NAME,MAC,STATUS'
      ,
    BASE_FIELDS     => 1,
    FUNCTION_FIELDS => 'change,del',
    FUNCTION_INDEX  => get_function_index('dhcphosts_user'),
    FILTER_COLS     => {
      ip_num => 'int2ip',
    },
    EXT_TITLES      => {
      'id'                => '#',
      'hostname'          => 'Hostname',
      'mac'               => 'MAC',
      'ipn_activate'      => "IPN Activate",
      'network_name'      => $lang{NETWORK},
      'status'            => "DHCP $lang{STATUS}",
      'option_82'         => 'Option 82',
      'ports'             => $lang{PORT},
      'vid'               => "$lang{USER} VLAN",
      'server_vid'        => "Server VLAN",
      'nas_name'          => "$lang{NAS}",
      'nas_id'            => 'NAS ID',
      'nas_ip'            => 'NAS IP',
      'boot_file'         => 'Boot file',
      'next_server'       => 'Next Server',
      'dv_status'         => "Internet $lang{STATUS}",
      'dv_status_id'      => "Internet $lang{STATUS} ID",
      'online'            => 'Online',
      'tp_id'             => "$lang{TARIF_PLAN} ID",
      #'ip'          => 'IP',
      'ip_num'            => 'IP',
      'month_traffic_in'  => "$lang{MONTH} $lang{RECV}",
      'month_traffic_out' => "$lang{MONTH} $lang{SENT}",
      'tp_name'           => "$lang{TARIF_PLAN}",
    },
    TABLE           => {
      width      => '100%',
      caption    => "$lang{HOSTS_USER}",
      qs         => $pages_qs,
      ID         => 'DHCP_HOSTS',
      EXPORT     => 1,
      MENU       =>
      (($LIST_PARAMS{UID}) ? "$lang{ADD}:UID=$LIST_PARAMS{UID}&index=$index&add_form=1:add;" : '' ) . "$lang{SEARCH}:index=$index&search_form=1:search"
      ,
    },
    MAKE_ROWS       => 1,
    MODULE          => 'Dhcphosts',
    TOTAL           => 1
  });

  $FORM{search_form} = 0;

  return 1;
}

#**********************************************************
=head2 dhcphosts_routes()

=cut
#**********************************************************
sub dhcphosts_routes{
  $Dhcphosts->{ACTION} = 'add';
  $Dhcphosts->{ACTION_LNG} = $lang{ADD};

  if ( $FORM{add} ){
    if($FORM{SRC}) {
      $Dhcphosts->route_add({ %FORM });
      if (!$Dhcphosts->{errno}) {
        $html->message('info', $lang{ADDED}, "$lang{ADDED} [$FORM{SRC}] ");
      }
    }
  }
  elsif ( $FORM{change} ){
    $FORM{SRC} = ip2int( $FORM{SRC} );
    $FORM{MASK} = ip2int( $FORM{MASK} );
    $FORM{ROUTER} = ip2int( $FORM{ROUTER} );
    $Dhcphosts->route_change( { %FORM } );

    if ( !$Dhcphosts->{errno} ){
      $html->message( 'info', $lang{CHANGED}, "$lang{CHANGED} [$FORM{ID}] $FORM{SRC} " );
    }
  }
  elsif ( $FORM{chg} ){
    $Dhcphosts->route_info( $FORM{chg} );

    $Dhcphosts->{ACTION} = 'change';
    $Dhcphosts->{ACTION_LNG} = $lang{CHANGE};

    if ( !$Dhcphosts->{errstr} ){
      $html->message( 'info', $lang{CHANGE}, "$lang{CHANGE} [$FORM{chg}] " );
    }
  }
  elsif ( $FORM{del} && $FORM{COMMENTS} ){
    $Dhcphosts->route_del( $FORM{del} );
    if ( !$Dhcphosts->{errstr} ){
      $html->message( 'info', $lang{DELETED}, "$lang{DELETED} [$FORM{del}] " );
    }
  }

  _error_show( $Dhcphosts );

  $html->tpl_show( _include( 'dhcphosts_routes', 'Dhcphosts' ), $Dhcphosts );

  $LIST_PARAMS{NET_ID} = $FORM{NET_ID};
  my $list = $Dhcphosts->routes_list( { %LIST_PARAMS } );

  my $table = $html->table(
    {
      width      => '100%',
      caption    => "Routes",
      title      => [ '#', "$lang{HOSTS_NETWORKS_NAME}", "$lang{HOSTS_NETWORKS_NET}", "NETMASK", "$lang{HOSTS_ROUTER}", "-", "-" ],
      qs         => $pages_qs,
      pages      => $Dhcphosts->{TOTAL},
      ID         => 'DHCPHOSTS_ROUTES'
    }
  );

  foreach my $line ( @{$list} ){
    $table->addrow(
      $line->[0],
      ($line->[1] || '') . ":" . ($line->[5] || ''),
      $line->[2],
      $line->[3],
      $line->[4],
      $html->button( $lang{CHANGE}, "index=$index&chg=$line->[0]&NET_ID=" . ($FORM{NET_ID} || ''), { class => 'change' } ),
      $html->button( $lang{DEL}, "index=$index&del=$line->[0]&NET_ID=" . ($FORM{NET_ID} || ''),
        { MESSAGE => "$lang{DEL} $line->[0]?", class => 'del' } ),
    );
  }

  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      rows       => [ [ "$lang{TOTAL}:", $html->b( $Dhcphosts->{TOTAL} ) ] ]
    }
  );
  print $table->show();

  return 1;
}

#**********************************************************
=head2 dhcphosts_check_params()

=cut
#**********************************************************
sub dhcphosts_check_params {

  if ( !$FORM{NETWORK} ){
    $FORM{NETWORK} = auto_net_sign( $FORM{IP} );
  }

  $FORM{MAC} = _mac_former( $FORM{MAC} || '' );
  $Dhcphosts->host_check( { %FORM } );

  if ( !$Dhcphosts->{errno} && $FORM{OPTION_82} && $FORM{PORTS} && $FORM{NAS_ID} && ! $conf{DHCPHOSTS_SKIP_SINGLE_HOST} ){
    my %params = ();

    if ( $conf{DHCPHOSTS_O82_USE_MAC} ){
      $params{MAC} = '00:00:00:00:00:00';
    }

    if ( $FORM{VID} && $FORM{SERVER_VID} ){
      $params{VID} = $FORM{VID};
      $params{SERVER_VID} = $FORM{SERVER_VID};
    }
    else{
      if($FORM{NAS_ID} && $FORM{VLAN} && $FORM{PORT}) {
        delete $FORM{VLAN};
      }
      elsif($conf{DHCPHOSTS_CHECK_VLAN}) {
        $params{VID} = $FORM{VID};
      }
    }


    my $list = $Dhcphosts->hosts_list(
      {
        LOGIN     => '_SHOW',
        NAS_ID    => $FORM{NAS_ID},
        PORTS     => $FORM{PORTS},
        %params,
        COLS_NAME => 1
      }
    );

    if ( $Dhcphosts->{TOTAL} > 0 && (! $FORM{ID} || $FORM{ID} != $list->[0]->{id})){
      $Dhcphosts->{errno} = 8;
      $Dhcphosts->{LOGIN} = $list->[0]->{login};
      $Dhcphosts->{UID} = $list->[0]->{uid};
    }
  }

  return 1;
}


#**********************************************************
=head2 dhcphosts_user($attr) - dhcphosts users add

=cut
#**********************************************************
sub dhcphosts_user{
  my ($attr) = @_;

  if ( $attr->{ACTION} ){
    $Dhcphosts->{ACTION} = $attr->{ACTION};
    $Dhcphosts->{ACTION_LNG} = $attr->{LNG_ACTION};
  }
  else{
    $Dhcphosts->{ACTION} = 'add';
    $Dhcphosts->{ACTION_LNG} = $lang{ADD};
  }

  if ( !$FORM{NETWORK} && $FORM{IP} && $FORM{IP} ne '0.0.0.0' ){
    $FORM{NETWORK} = auto_net_sign( $FORM{IP} );
  }

  #$FORM{add_form} = 1;
  if ( ($FORM{add} || $FORM{change}) && !defined( $FORM{NETWORK} ) ){
    $html->message( 'err', $lang{ERROR}, "$lang{ERR_WRONG_DATA}: Select network", { ID => 139 } );
    return 1 if ($attr->{REGISTRATION});
  }
  elsif ( (! $FORM{IP} || $FORM{IP} eq '0.0.0.0') && $FORM{NETWORK} ){
    my $static_ip = dhcphosts_get_static_ip( $FORM{NETWORK} );
    $FORM{IP} = $static_ip if ($static_ip);
  }
  elsif ( $FORM{UID} ) {
    $Dhcphosts->hosts_list( { UID => $FORM{UID}, COLS_NAME => 1 } );
    if ($Dhcphosts->{TOTAL}) {
      $FORM{HOST_COUNT}=$Dhcphosts->{TOTAL};
      if (!$FORM{add_form} && ! $FORM{chg} && ! $FORM{add} && ! $FORM{change} && ! $FORM{del}) {
        $FORM{chg} = $Dhcphosts->{list}->[0]->{id};
      }
    }
  }

  if ( !$FORM{HOSTNAME} ){
    if ( $conf{DHCPHOSTS_LOGIN_AS_HOSTNAME} ){
      $FORM{HOSTNAME} = $users->{LOGIN};
    }
    else{
      $FORM{HOSTNAME} = 'Host_' . ($FORM{UID} ? $FORM{UID} : '');
    }
  }

  if ( $FORM{add} ){
    if ( (! $FORM{IP} || $FORM{IP} eq '0.0.0.0') && !$FORM{OPTION_82} ){
      $html->message( 'err', $lang{ERROR}, "$lang{ERR_WRONG_DATA}: IP '0.0.0.0' ", { ID => 140 } );
      return 0 if ($attr->{REGISTRATION});
    }
    elsif ( $FORM{MAC} !~ /$MAC/i ){
      $html->message( 'err', $lang{ERROR}, "$lang{ERR_WRONG_DATA}: MAC '$FORM{MAC}'", { ID => 141 });
      return 0 if ($attr->{REGISTRATION});
    }
    elsif ( !$FORM{HOSTNAME} ){
      $html->message( 'err', $lang{ERROR}, "$lang{ERR_WRONG_DATA}: $lang{HOSTS_HOSTNAME}  ", { ID => 142 } );
      return 0 if ($attr->{REGISTRATION});
    }
    else{
      dhcphosts_check_params();

      if ( !$Dhcphosts->{errno} ){
        $Dhcphosts->host_add({ %FORM,
                               VID => (defined($FORM{VID}) && $FORM{VID} =~ /\d+/) ? $FORM{VID} : $Dhcphosts->{VLAN}
                             });
        if ( !$Dhcphosts->{errno} ){
          $html->message( 'info', "Dhcp : $lang{ADDED}", "$lang{ADDED} [$FORM{HOSTNAME}] " ) if (!$attr->{QUITE} );
          dhcphosts_config(
            {
              NETWORKS => $FORM{NETWORK},
              reconfig => 1
            }
          );

          # If install Snmputils make make assign
          if ( in_array( 'Snmputils', \@MODULES ) && $FORM{NAS_ID} ){
            load_module( 'Snmputils', $html );
            my $return = snmputils_periodic( { NAS_IDS => $FORM{NAS_ID}, DEBUG => 1 } );
            $html->message( 'info', "SNMPutils", $html->pre( $return, { OUTPUT2RETURN => 1 } ) );
          }

          #Activate IPN Section
          if ( $FORM{IPN_ACTIVATE} && $conf{IPN_DHCP_ACTIVE} && in_array( 'Ipn', \@MODULES ) ){
            load_module( 'Ipn', $html );
            $FORM{ACTIVE} = 1;
            $FORM{NAS_ID} = undef;
            ipn_user_activate( { IP => $FORM{IP} } );
          }
        }
        return 1 if ($attr->{REGISTRATION});
      }
    }
  }
  elsif($FORM{info}) {
    $html->message('info', $lang{INFO}, "User Info");
    $Dhcphosts->host_info( $FORM{info} );

  }
  elsif ( $FORM{change} ){
    if(defined($FORM{NAS_ID1}) && $FORM{NAS_ID1} =~ /^\d+$/) {
      $FORM{NAS_ID}=$FORM{NAS_ID1};
    }

    dhcphosts_check_params();
    if ( $FORM{MAC} !~ /$MAC/i ){
      $html->message( 'err', $lang{ERROR}, "WRONG MAC ", { ID => 145 } );
    }
    else{
      if ( !$Dhcphosts->{errno} ){

        $Dhcphosts->host_change({
          %FORM,
          VID => (defined($FORM{VID}) && $FORM{VID} =~ /\d+/) ? $FORM{VID} : $Dhcphosts->{VLAN}
        });

        if ( !$Dhcphosts->{errno} ){
          $html->message( 'info', $lang{CHANGED}, "$lang{CHANGED} [". ($FORM{ID} || q{}) ."]" );
          dhcphosts_config( { NETWORKS => $FORM{NETWORK}, reconfig => 1 } );
          #Del leases
          $Dhcphosts->leases_clear({
             MAC => ($FORM{MAC} && $FORM{MAC} ne '00:00:00:00:00:00') ? $FORM{MAC} : undef,
             UID => (!$FORM{MAC} || $FORM{MAC} eq '00:00:00:00:00:00') ? $FORM{UID} : undef,
          });

          # If install Snmputils make make assign
          if ( in_array( 'Snmputils', \@MODULES ) && $FORM{NAS_ID} ){
            load_module( "Snmputils", $html );
            my $return = snmputils_periodic( { NAS_IDS => $FORM{NAS_ID}, DEBUG => 1 } );
            print $html->message( 'info', "Snmputils: $lang{INFO}", $html->pre( $return, { OUTPUT2RETURN => 1 } ) );
          }
        }
      }
    }
  }
  elsif ( $FORM{chg} ){
    $Dhcphosts->host_info( $FORM{chg} );
    $FORM{NETWORK} = $Dhcphosts->{NETWORK};
    $Dhcphosts->{ACTION} = 'change';
    $Dhcphosts->{ACTION_LNG} = $lang{CHANGE};

    $FORM{add_form} = 1;

    if ( !$Dhcphosts->{errstr} ){
      #$html->message( 'info', $lang{CHANGE}, "$lang{CHANGE} [$FORM{chg}] " );
    }
  }
  elsif ( $FORM{del} && $FORM{COMMENTS} ){
    # If install Snmputils make make assign
    if ( in_array( 'Snmputils', \@MODULES ) ){
      $Dhcphosts->host_info( $FORM{del} );
    }

    $Dhcphosts->host_del( { ID => $FORM{del} } );

    if ( !$Dhcphosts->{errstr} ){
      $html->message( 'info', $lang{DELETED}, "$lang{DELETED} [$FORM{del}] " );

      $FORM{NETWORK} = auto_net_sign( $FORM{IP} );
      dhcphosts_config(
        {
          NETWORKS => $FORM{NETWORK},
          reconfig => 1
        }
      );

      if ( in_array( 'Snmputils', \@MODULES ) ){
        if ( $Dhcphosts->{NAS_ID} ){
          load_module( "Snmputils", $html );
          my $return = snmputils_periodic( { NAS_IDS => $Dhcphosts->{NAS_ID}, DEBUG => 1 } );
          print $html->message( 'info', "SNMP", $html->pre( $return, { OUTPUT2RETURN => 1 } ) );
        }
      }
    }

    $Dhcphosts->leases_clear( {
      MAC => ($FORM{MAC} && $FORM{MAC} ne '00:00:00:00:00:00') ? $FORM{MAC} : undef,
      UID => (!$FORM{MAC} || $FORM{MAC} eq '00:00:00:00:00:00') ? $FORM{UID} : undef,
    });

    delete( $FORM{del} );
  }

  if ( $Dhcphosts->{errno} ){
    if ( $Dhcphosts->{errno} == 18 ){
      $html->message( 'err', $lang{ERROR}, "$lang{NETWORK} # $FORM{NETWORK} $lang{NOT_EXIST}\n IP: ". ($FORM{IP} || q{}), { ID => 117 } );
    }
    elsif ( $Dhcphosts->{errno} == 17 ){
      $html->message( 'err', $lang{ERROR}, "# $FORM{NETWORK} $lang{ERR_WRONG_NETWORK}\n IP: ". ($FORM{IP} || q{}), { ID => 122 } );
    }
    elsif ( $Dhcphosts->{errno} == 23 ){
      $html->message( 'err', $lang{ERROR}, "MAC: $FORM{MAC} IP: $FORM{IP} $lang{EXIST}\n" . $html->button( $Dhcphosts->{LOGIN},
          "index=15&UID=" . ($Dhcphosts->{UID} || q{}) . "&MODULE=Dhcphosts", { BUTTON => 1 } ), { ID => 123 } );
    }
    elsif ( $Dhcphosts->{errno} == 7 ){
      my %SEARCH_PARAMS = ();

      if ( $FORM{IP} eq '0.0.0.0' ){
        $SEARCH_PARAMS{MAC} = $FORM{MAC};
      }
      else{
        $SEARCH_PARAMS{IP} = $FORM{IP};
      }

      my $list = $Dhcphosts->hosts_list( {
        %SEARCH_PARAMS,
        LOGIN     => '_SHOW',
        COLS_NAME => 1
      } );

      my $login = '';
      if ( $Dhcphosts->{TOTAL} > 0 ){
        $login = $html->button( "$list->[0]->{login}", "index=15&UID=" . $list->[0]->{uid} . "&MODULE=Dhcphosts" );
      }

      $html->message( 'err', $lang{ERROR}, "[7] $lang{EXIST} $FORM{IP}/$FORM{MAC} $login", { ID => 124 });
    }
    elsif ( $Dhcphosts->{errno} == 8 ){
      my $login = $html->button( "$Dhcphosts->{LOGIN}", "index=15&UID=$Dhcphosts->{UID}&MODULE=Dhcphosts" );
      $html->message( 'err', $lang{ERROR}, "Option 82 $lang{EXIST} NAS: $FORM{NAS_ID} $lang{PORT}: $FORM{PORTS} $login", { ID => 125 } );
    }
    else{
      _error_show( $Dhcphosts );
    }

    return 1 if ($attr->{REGISTRATION});
  }

  $Dhcphosts->{NETWORKS_SEL} = dhcphosts_network_sel( { AUTOSIGN => 1 } );
  $Dhcphosts->{DISABLE} = ' checked' if ($Dhcphosts->{DISABLE});
  if ( !in_array( 'Ipn', \@MODULES ) ){
    $Dhcphosts->{IPN_ACTIVATE_BUTTON} = "Ipn module not install";
  }
  elsif ( $Dhcphosts->{IPN_ACTIVATE} ){
    $Dhcphosts->{IPN_ACTIVATE} = ' checked';
    if ( $Dhcphosts->{IP} ne '0.0.0.0' ){
      use Dv_Sessions;
      my $Sessions = Dv_Sessions->new( $db, $admin, \%conf );
      $Sessions->online( { FRAMED_IP_ADDRESS => $Dhcphosts->{IP},
                           ACCT_SESSION_ID   => '_SHOW'
                        } );

      if ( $Sessions->{TOTAL} ){
        my $session_info  = $Sessions->{list}->[0];
        $Dhcphosts->{IPN_ACTIVATE_BUTTON} = $html->color_mark( 'Online', '#00FF00' )
        . $html->button('H', "index=". get_function_index( 'ipn_user_activate' )
            . "&UID=$session_info->{uid}&LOGOUT=1&SESSION_ID=$session_info->{acct_session_id}&REMOTE_ADDR=$Dhcphosts->{IP}",
          { TITLE => 'Hangup', class => 'btn btn-secondary off', NO_LINK_FORMER => 1 });
      }
      else{
        $Dhcphosts->{IPN_ACTIVATE_BUTTON} = $html->button( $lang{ACTIVATE},
          "UID=". ($FORM{UID} || q{}) ."&ACTIVE=1&REMOTE_ADDR=$Dhcphosts->{IP}&NAS_ID=$Dhcphosts->{NAS_ID}&index=" . get_function_index( 'ipn_user_activate' )
          , { BUTTON => 1 } );
      }
    }
  }

  if ( !$Dhcphosts->{OPTION_82} ){
    $Dhcphosts->{OPTION_82} = ($FORM{OPTION_82}) ? ' checked' : q{};
  }
  else{
    $Dhcphosts->{OPTION_82} = ' checked';
  }

  if ( in_array( 'Equipment', \@MODULES ) && $Dhcphosts->{NAS_ID} ){
    $Dhcphosts->{SWITCH_STATUS} =
      $html->button( $lang{STATUS}, "NAS_ID=$Dhcphosts->{NAS_ID}&index=" . get_function_index( 'equipment_info' ),
        { class => 'info' } );
  }

  my $nas_name = '';
  if ($Dhcphosts->{NAS_ID} || $FORM{NAS_ID}){
    my $nas_list = $Nas->list({ NAS_ID => $Dhcphosts->{NAS_ID} || $FORM{NAS_ID}, COLS_NAME => 1});
    if ($nas_list && ref $nas_list eq 'ARRAY'){
      $nas_name = $nas_list->[0]{nas_name};
    }
  }
  
  $Dhcphosts->{NAS_SEL} = $html->form_select(
    'NAS_ID',
    {
      SELECTED          => $Dhcphosts->{NAS_ID} || $FORM{NAS_ID},
      SEL_LIST          => '',
      #$Nas->list({ COLS_NAME => 1, DOMAIN_ID => $users->{DOMAIN_ID}, SHORT => 1, NAS_NAME => '_SHOW' }),
      SEL_KEY           => 'nas_id',
      SEL_VALUE         => 'nas_name',
      SEL_OPTIONS       => { '' => '' },
      MAIN_MENU         => get_function_index( 'form_nas' ),
      MAIN_MENU_ARGV    => ($Dhcphosts->{NAS_ID}) ? "NAS_ID=$Dhcphosts->{NAS_ID}" : '',
      EXT_BUTTON        => $Dhcphosts->{SWITCH_STATUS},
      # Popup window
      POPUP_WINDOW      => 'form_search_nas',
      POPUP_WINDOW_TYPE => 'search',
      SEARCH_STRING     => 'POPUP=1&NAS_SEARCH=0'. (($FORM{UID}) ? "&UID=$FORM{UID}" : ''),
      HAS_NAME          => 1,
      TOOLTIP           =>  $nas_name
    }
  );

  if ( in_array( 'Equipment', \@MODULES ) ){
    $Dhcphosts->{PORT}=$Dhcphosts->{PORTS} if ($Dhcphosts->{PORTS});
    $Dhcphosts->{PORTS} = $html->form_select(
      'PORTS',
      {
        POPUP_WINDOW      => 'form_search_port',
        POPUP_WINDOW_TYPE => 'choose',
        POPUP_SIZE        => 'lg',
        SEARCH_STRING     => 'get_index=equipment_info&visual=0&header=2&PORT_SHOW=1',
        VALUE             => $Dhcphosts->{PORTS} || $FORM{PORTS},
        SELECTED          => $Dhcphosts->{PORTS} || $FORM{PORTS},
        PARENT_INPUT      => 'NAS_ID'
      }
    );

    load_module('Equipment', $html);
    require Equipment;
    Equipment->import();
    my $Equipment = Equipment->new($db, $admin, \%conf);
    $Dhcphosts->{VLAN_SEL} = $html->form_select(
      'SERVER_VID',
      {
        SELECTED          => $Dhcphosts->{SERVER_VID},
        SEL_LIST          => $Equipment->vlan_list({ PAGE_ROWS => 1000, COLS_NAME => 1 }),
        SEL_KEY           => 'number',
        SEL_VALUE         => 'name',
        SEL_OPTIONS       => { '' => '--' },
        MAIN_MENU         => get_function_index( 'equipment_vlan' ),
        MAIN_MENU_ARGV    => ($Dhcphosts->{SERVER_VID}) ? "ID=$Dhcphosts->{SERVER_VID}" : '',
      }
    );

    $Dhcphosts->{EQUIPMENT_INFO} = equipment_user_info($Dhcphosts);
  }
  else{
    $Dhcphosts->{VLAN_SEL} = $html->form_input( 'SERVER_VID', ($Dhcphosts->{SERVER_VID} || q{}), { SIZE => 10 } );
    $Dhcphosts->{PORTS} = $html->form_input( 'PORTS', ($Dhcphosts->{PORTS} || q{}), { SIZE => 10 } );
  }

  my $nas_index = get_function_index( 'form_nas' );
  if ( $nas_index ){
    $Dhcphosts->{NAS_BUTTON} = $html->button( $lang{INFO}, "index=$nas_index&NAS_ID=". ($Dhcphosts->{NAS_ID} || ''),
      { class => 'show' } );
  }

  if ( $FORM{UID} ){
    if($FORM{MODULE} && $FORM{MODULE} eq 'Dhcphosts'){
      $html->tpl_show(
      _include( 'dhcphosts_host_form_user_version', 'Dhcphosts' ),
      {
        %{ $Dhcphosts->host_defaults() },
        %FORM,
        HOSTNAME => ($users->{LOGIN} ? $users->{LOGIN} : q{}) . (($FORM{HOST_COUNT} && $FORM{HOST_COUNT} > 1) ? '_' . $FORM{HOST_COUNT} : ''),
        %{$attr},
        %{$Dhcphosts},
      }
    );
    }
    else{
      $html->tpl_show(
      _include( 'dhcphosts_host', 'Dhcphosts' ),
      {
        %{ $Dhcphosts->host_defaults() },
        %FORM,
        HOSTNAME => ($users->{LOGIN} ? $users->{LOGIN} : q{}) . (($FORM{HOST_COUNT} && $FORM{HOST_COUNT} > 1) ? '_' . $FORM{HOST_COUNT} : ''),
        %{$attr},
        %{$Dhcphosts},
      }
    );
  }
  }

  #delete $FORM{UID};
  if ( !$attr->{HOSTS_CALL} ){
    dhcphosts_hosts();
  }

  return 1;
}

#**********************************************************
=head2 dhcphosts_get_static_ip($network_id) Get static ip from pool

=cut
#**********************************************************
sub dhcphosts_get_static_ip{
  my ($network_id) = @_;
  my $ip = '0.0.0.0';

  $Dhcphosts->network_info( $network_id );

  if ( $Dhcphosts->{TOTAL} < 1 ){
    $html->message( 'err', $lang{ACTIVATE}, "$lang{ERROR} Can't find your network '$network_id' ", { ID => 117 } );
    return -1;
  }
  elsif ( !$Dhcphosts->{STATIC} ){
    return 0;
  }

  my $start_ip = ip2int( $Dhcphosts->{IP_RANGE_FIRST} );
  my $end_ip = ip2int( $Dhcphosts->{IP_RANGE_LAST} );

  if ( $start_ip == 0 || $end_ip == 0 ){
    $html->message( 'err', $lang{ERROR},
      "$lang{ERR_WRONG_RANGE}. $lang{START} IP: $Dhcphosts->{IP_RANGE_FIRST} $lang{END} IP: $Dhcphosts->{IP_RANGE_LAST}" );
    return 0;
  }
  else{
    my %users_ips = ();

    my $list = $Dhcphosts->hosts_list(
      {
        IP        => '_SHOW',
        PAGE_ROWS => 100000,
        #GID       => '>=0',
        SKIP_GID  => 1,
        COLS_NAME => 1
      }
    );

    foreach my $line ( @{$list} ){
      $users_ips{ ip2int( $line->{ip} ) } = 1;
    }

    for ( my $ip_cur = $start_ip; $ip_cur <= $end_ip; $ip_cur++ ){
      if ( !$users_ips{$ip_cur} ){
        return int2ip( $ip_cur );
      }
    }
    $html->message( 'err', $lang{ERROR}, "$lang{ERR_NO_FREE_IP_IN_POOL}" );
  }

  return $ip;
}

#**********************************************************
=head2 dhcphosts_network_sel($attr)

=cut
#**********************************************************
sub dhcphosts_network_sel{
  my ($attr) = @_;

  my $networks_list = $Dhcphosts->networks_list( {
    NETWORK_INT      => '_SHOW',
    STATIC           => '_SHOW',
    NAME             => '_SHOW',
    NETWORK          => '_SHOW',
    NETMASK          => '_SHOW',
    PAGE_ROWS        => 10000,
    SORT             => 'network', # Sort by network
    COLS_NAME        => 1
  });

  if ( _error_show( $Dhcphosts ) || !$networks_list || ref $networks_list ne 'ARRAY' ){
    return $html->button("$lang{ADD} $lang{NETWORKS}", "&add_form=1&index=". get_function_index('dhcphosts_networks'), { class => 'btn btn-danger' });
  }

  # Sorting by network
  $networks_list = [ sort { $a->{'network_int'} <=> $b->{'network_int' } } @{$networks_list} ];

  # Name should contain 'Autoselect' if is static;
  foreach my $network ( @{$networks_list} ){
    my $autoselect = ($network->{static}) ? " $lang{AUTO} IP" : '';
    $network = {
      id => $network->{id},
      name => $network->{name} . '(' . $network->{network} . '/' . $network->{netmask} . ') ' . $autoselect,
    };
  }

  unshift (@$networks_list, { id => 0, name => "$lang{ALL}" }) if ($attr->{SEARCH});
  push (@$networks_list, { id => 0, name => "$lang{AUTO}" }) if ($attr->{AUTOSIGN});

  return $html->form_select(
    'NETWORK',
    {
      SELECTED       => $FORM{NETWORK} || 0 || '',
      SEL_LIST       => $networks_list,
      MAIN_MENU      => get_function_index( 'dhcphosts_networks' ),
      MAIN_MENU_ARGV => "UID=" . ($FORM{UID} ? $FORM{UID} : '') . (( $FORM{NETWORK} ) ? "&chg=$FORM{NETWORK}" : '')
    }
  );

}

#**********************************************************
=head2 dhcphosts_config($attr) - Generate host config

=cut
#**********************************************************
sub dhcphosts_config{
  my ($attr) = @_;

  # If not set reconfigure command
  if ( !$conf{DHCPHOSTS_RECONFIGURE} ){
    if ( $FORM{web_reconfig} ){
      $html->message( 'err', $lang{ERORR}, "Not defined \$conf{DHCPHOSTS_RECONFIGURE}" );
    }
    return '';
  }

  my %INFO = ();
  my %NAS_MACS = ();

  my $xml_output = 0;
  if ( $FORM{xml} ){
    $FORM{xml} = undef;
    $xml_output = 1;
  }

  # Nas CSI
  my $nas_list = $Nas->list( {
    COLS_NAME     => 1,
    SHORT         => 1,
    MAC           => '_SHOW',
    NAS_RAD_PAIRS => '_SHOW',
    NAS_NAME      => '_SHOW',
    PAGE_ROWS     => 60000,
  });

  foreach my $line ( @{$nas_list} ){
    if ( $line->{mac} ){
      $NAS_MACS{ $line->{id} } = ($line->{nas_name} || q{}) .','. ($line->{mac} || q{});
    }
  }

  my $list = $Dhcphosts->networks_list({
    DISABLE   => 0,
    NET_PARENT=> '_SHOW',
    PAGE_ROWS => 10000,
    COLS_NAME => 1,
    SORT      => 2
  });

  my %SUBNETS = ();
  my %NETWORKS_INFO = ();

  foreach my $net ( @{$list} ){
    my $NET_ID = $net->{id};
    $INFO{OPTION82_POOLS} = '';
    $Dhcphosts->network_info( $NET_ID );

    $INFO{DNS} = ($Dhcphosts->{DNS}) ? "option domain-name-servers $Dhcphosts->{DNS}" : undef;
    $INFO{DNS} .= ",$Dhcphosts->{DNS2}" if ($Dhcphosts->{DNS2});
    $INFO{DNS} .= ';' if ($INFO{DNS});
    $INFO{NTP} = "option ntp-servers $Dhcphosts->{NTP};" if ($Dhcphosts->{NTP});

    $INFO{DOMAINNAME}    = ($Dhcphosts->{DOMAINNAME}) ? "option domain-name \"$Dhcphosts->{DOMAINNAME}\";" : undef;

    $INFO{ROUTERS}       = ($Dhcphosts->{ROUTERS} ne '0.0.0.0') ? "option routers $Dhcphosts->{ROUTERS};" : '';
    $INFO{DATETIME}      = "$DATE $TIME / Dhcphosts";

    $INFO{NETWORK_ID}    = $Dhcphosts->{ID};
    $INFO{NETWORK_NAME}  = $Dhcphosts->{NAME} || 'NETWORK_NAME';
    $INFO{BLOCK_NETWORK} = $Dhcphosts->{BLOCK_NETWORK};
    $INFO{BLOCK_MASK}    = $Dhcphosts->{BLOCK_MASK};
    $INFO{NETWORK}       = $Dhcphosts->{NETWORK};
    $INFO{NETWORK_MASK}  = $Dhcphosts->{MASK};
    $INFO{DESCRIBE}      = $Dhcphosts->{NAME};
    $INFO{DESCRIBE}      = $Dhcphosts->{COMMENTS};
    $INFO{AUTHORITATIVE} = ($Dhcphosts->{AUTHORITATIVE}) ? 'authoritative;' : '';
    $INFO{DENY_UNKNOWN_CLIENTS} = ($Dhcphosts->{DENY_UNKNOWN_CLIENTS}) ? 'deny unknown-clients;' : '';
    $INFO{VLAN}          = $Dhcphosts->{VLAN} || q{};
    if ( !$Dhcphosts->{STATIC} && $Dhcphosts->{IP_RANGE_FIRST} ne '0.0.0.0' ){
      $INFO{RANGE} = "range $Dhcphosts->{IP_RANGE_FIRST} $Dhcphosts->{IP_RANGE_LAST};";
    }
    else{
      $INFO{RANGE} = '';
    }

    $NETWORKS_INFO{$NET_ID}{NAME}=$INFO{NETWORK_NAME};
    $NETWORKS_INFO{$NET_ID}{VLAN}=$INFO{VLAN};

    #Add static route
    $list = $Dhcphosts->routes_list( { NET_ID => $NET_ID } );
    $INFO{NET_ROUTES} = '';
    $INFO{NET_ROUTES_RFC3442} = '';
    if ( $Dhcphosts->{TOTAL} > 0 ){
      my $routes = "";

      foreach my $line2 ( @{$list} ){
        my $src    = $line2->[2];
        my $mask   = $line2->[3];
        my $router = $line2->[4];

        my @ip = split( /\./, $src );
        my @ip2 = split( /\./, $router );
        $mask = mask2bitlen( $mask );
        $routes .= $mask;

        for ( my $i = 0; $i < $mask / 8; $i++ ){
          $routes .= ", $ip[$i]";
        }
        $routes .= ", " . join( ", ", @ip2 ) . ",\n";
      }

      chop $routes;
      chop $routes;
      $routes .= ";";

      # MS routes: adds extras to supplement routers option
      $INFO{NET_ROUTES} = "option ms-classless-static-routes $routes";

      # RFC3442 routes: overrides routers option
      $INFO{NET_ROUTES_RFC3442} = "option rfc3442-classless-static-routes $routes";
    }

    #Make hosts
    #$INFO{NETWORK} = '';

    my %PARAMS = ();

    if ( defined( $conf{DHCPHOSTS_DEPOSITCHECK} ) ){
      $PARAMS{DEPOSIT} = '_SHOW';
    }

    if ( defined( $conf{DHCPHOSTS_EXT_DEPOSITCHECK} ) ){
      $PARAMS{EXT_DEPOSIT} = '_SHOW';
    }

    $list = $Dhcphosts->hosts_list({
      NETWORK      => $NET_ID,
      STATUS       => 0,
      CREDIT       => '_SHOW',
      USER_DISABLE => 0,
      LOGIN        => '_SHOW',
      HOSTNAME     => '_SHOW',
      MAC          => '_SHOW',
      IP           => '_SHOW',
      PORTS        => '_SHOW',
      NAS_ID       => '_SHOW',
      OPTION_82    => '_SHOW',
      VID          => '_SHOW',
      BOOT_FILE    => '_SHOW',
      DELETED      => 0,
      NEXT_SERVER  => '_SHOW',
      COLS_NAME    => 1,
      %PARAMS,
      PAGE_ROWS    => 100000,
    });

    foreach my $host ( @{$list} ){
      my $deposit = ($host->{deposit} && $host->{deposit} =~ /^\d+$/) ? $host->{deposit} : 0;
      if ( defined( $conf{DHCPHOSTS_DEPOSITCHECK} )
        && $conf{DHCPHOSTS_DEPOSITCHECK} =~ /^\d+$/
        && ($deposit + ($host->{credit} || 0)) < $conf{DHCPHOSTS_DEPOSITCHECK} ){
        next;
      }
      elsif ( defined( $conf{DHCPHOSTS_EXT_DEPOSITCHECK} ) && defined( $host->{ext_deposit} ) && ($host->{ext_deposit} || 0) < $conf{DHCPHOSTS_EXT_DEPOSITCHECK} ){
        next;
      }

      $INFO{LOGIN}      = $host->{login};
      $INFO{CLIENT_MAC} = $host->{mac};
      $INFO{CLIENT_IP}  = $host->{ip};

      #Option 82
      if ( $host->{option_82} ){
        $INFO{CLIENT_MAC} =~ s/^00/0/;
        $INFO{CLIENT_MAC} =~ s/:0/:/g;
        $INFO{CLIENT_MAC} = lc( $INFO{CLIENT_MAC} );
        $INFO{OPTION82_NAS_PORT} = $host->{ports};
        $INFO{CLIENT_VLAN} = $host->{vid};
        my @OPTION82_MATCHES = ();

        #Check swich
        if ( $NAS_MACS{ $host->{nas_id} } ){
          ($INFO{OPTION82_NAS_NAME}, $INFO{OPTION82_NAS_MAC}) = split( /,/, $NAS_MACS{ $host->{nas_id} }, 2 );
          if ( $INFO{OPTION82_NAS_MAC} =~ /:/ ){
            $INFO{OPTION82_NAS_MAC} =~ s/^00/0/;
            $INFO{OPTION82_NAS_MAC} =~ s/:0/:/g;
          }

          $INFO{OPTION82_NAS_MAC} = lc( $INFO{OPTION82_NAS_MAC} );
          $INFO{OPTION82_NAS_NAME} =~ s/ /\_/g;
          push @OPTION82_MATCHES,
            "binary-to-ascii(16, 8, \":\", substring(option agent.remote-id, 2, 6)) = \"$INFO{OPTION82_NAS_MAC}\"";
        }
        else{
          if (!$attr->{QUITE} && $host->{nas_id}){
            if(! $AUTH{dhcp} && ! $AUTH{mikrotik_dhcp}){
              print "Can't find NAS MAC NAS: '$host->{nas_id}' MAC: $INFO{CLIENT_MAC} LOGIN: $INFO{LOGIN}\n";
            }
          }
          $INFO{OPTION82_NAS_NAME} = '';
          $INFO{OPTION82_NAS_MAC} = '';
        }

        #Check nas port
        push @OPTION82_MATCHES,
          "binary-to-ascii(10, 8, \":\", substring(option agent.circuit-id, 5, 1)) = \"$INFO{OPTION82_NAS_PORT}\"" if ($INFO{OPTION82_NAS_PORT} && $INFO{OPTION82_NAS_PORT} ne '');

        #Client MAC
        push @OPTION82_MATCHES,
          "binary-to-ascii (16, 8, \":\", substring(hardware, 1, 7))=\"$INFO{CLIENT_MAC}\"" if ($INFO{CLIENT_MAC} ne '0:0:0:0:0:0' && $conf{DHCPHOSTS_O82_USE_MAC});

        #Vlan option
        push @OPTION82_MATCHES,
          "binary-to-ascii (10, 16, \"\", substring( option agent.circuit-id, 2, 2)) = \"$INFO{CLIENT_VLAN}\" " if ($INFO{CLIENT_VLAN} > 0);

        my $matches = join( ' and ', @OPTION82_MATCHES );
        $INFO{DHCPHOSTS_O82_CLASS_NAME} = "$INFO{OPTION82_NAS_NAME}-$INFO{OPTION82_NAS_MAC}-port-$INFO{OPTION82_NAS_PORT}";

        if ( $conf{DHCPHOSTS_O82_USE_MAC} ){
          $INFO{OPTION82_CLASS_NAME} .= "-$INFO{CLIENT_MAC}";
        }

        # make custom option 82 tpl
        if ( $conf{DHCPHOSTS_O82_CLASS_TPL} ){
          $INFO{OPTION82_CLASS} .= $html->tpl_show( _include( 'dhcphosts_dhcp_conf_o82_class', 'Dhcphosts' ), \%INFO,
            { OUTPUT2RETURN => 1, CONFIG_TPL => 1 } );
        }
        else{
          $INFO{OPTION82_CLASS} .= "# LOGIN: $host->{login}\nclass \"$INFO{DHCPHOSTS_O82_CLASS_NAME}\" { match if $matches ;  \n }\n\n";
        }

        $INFO{OPTION82_POOLS} .= "pool { range $host->{ip}; allow members of \"$INFO{DHCPHOSTS_O82_CLASS_NAME}\"; }\n";
      }
      else{
        #Static hosts
        #Skip empty mac or ip
        if ( $INFO{CLIENT_MAC} eq '00:00:00:00:00:00' || $INFO{CLIENT_IP} eq '0.0.0.0' ){
          next;
        }

        $INFO{HOSTS} .= $html->tpl_show(
          _include( 'dhcphosts_dhcp_conf_host', 'Dhcphosts', ),
          {
            MAC         => $INFO{CLIENT_MAC},
            IP          => $INFO{CLIENT_IP},
            ROUTERS     =>
              ($Dhcphosts->{ROUTERS} ne '0.0.0.0') ? $Dhcphosts->{ROUTERS} : convert_ip( "0.0.0.1", '', $Dhcphosts ),
            LOGIN       => $host->{login},
            HOSTNAME    => $host->{hostname},
            BOOT_FILE   => ($host->{boot_file}) ? "filename \"" . $host->{boot_file} . "\";" : '',
            NEXT_SERVER => ($host->{next_server}) ? "next-server $host->{next_server};" : '',
          },
          { OUTPUT2RETURN => 1, CONFIG_TPL => 1 }
        );
      }
    }

    $SUBNETS{ $net->{net_parent} }{ $net->{id} } .= $html->tpl_show( _include( 'dhcphosts_dhcp_conf_subnet', 'Dhcphosts' ),
      \%INFO,
      { OUTPUT2RETURN => 1,
        CONFIG_TPL    => 1
      } );

    $INFO{SUBNETS} .= $html->tpl_show( _include( 'dhcphosts_dhcp_conf_subnet', 'Dhcphosts' ),
      \%INFO,
      { OUTPUT2RETURN => 1,
        CONFIG_TPL    => 1 } );
  }

  $INFO{NETWORKS} = '';
  foreach my $id ( sort keys %{ $SUBNETS{0} } ){
    my $net_content = $SUBNETS{0}{$id};

    my $network_name = $NETWORKS_INFO{$id}{NAME} || $INFO{NETWORK_NAME} || q{};
    my $vlan = $NETWORKS_INFO{$id}{VLAN} || q{};
    $network_name .= "_$id";

    $INFO{NETWORKS} .= "#Shared network ID: $id VLAN: $vlan
shared-network $network_name  {
$net_content";

    #Add subnets
    while (my ($id_sub, $subnet_content) = each %{ $SUBNETS{$id} }) {
      $INFO{NETWORKS} .= "\n# SUBNET ID: $id_sub\n $subnet_content";
    }

    $INFO{NETWORKS} .= "}
#========================\n";
  }

  $conf{DHCPHOSTS_CONFIG} = "/usr/local/etc/dhcpd.conf" if (!$conf{DHCPHOSTS_CONFIG});
  $INFO{LEASES_FILE} = ($conf{DHCPHOSTS_LEASES} && $conf{DHCPHOSTS_LEASES} ne 'db') ? "lease-file-name \"$conf{DHCPHOSTS_LEASES}\";" : "lease-file-name \"/var/db/dhcpd/dhcpd.leases\";";

  if ( !$AUTH{dhcp} ){
    if ( ($attr->{reconfig} || $FORM{reconfig}) ){
      my $tpl = $html->tpl_show( _include( 'dhcphosts_dhcp_conf_main', 'Dhcphosts' ), \%INFO,
        { OUTPUT2RETURN => 1,
          CONFIG_TPL    => 1 } );

      if ( open( my $fh, '>', "$conf{DHCPHOSTS_CONFIG}" ) ){
        print $fh $tpl;
        close( $fh );
      }
      else{
        print "Can't open file '$conf{DHCPHOSTS_CONFIG}' $!";
        return 0;
      }

      $html->message( 'info', $lang{INFO}, "DHCP $lang{RECONFIGURE} '$conf{DHCPHOSTS_CONFIG}'" ) if (!$attr->{QUITE});
    }
    else{
      my $conf_content = $html->tpl_show( _include( 'dhcphosts_dhcp_conf_main', 'Dhcphosts' ), \%INFO,
        { OUTPUT2RETURN => 1,
          CONFIG_TPL    => 1 } );

      $html->pre( $conf{DHCPHOSTS_CONFIG} );
      print $html->element('textarea',  $conf_content, { cols=>90, rows => 20 });
      print $html->form_main(
          {
            HIDDEN => {
              index  => $index,
              IDS    => $FORM{IDS},
              config => 'dhcp.conf'
            },
            SUBMIT => { reconfig => $lang{RECONFIGURE} },
            METHOD => 'GET'
          }
        );
    }
  }

  dhcphosts_reconfigure( { DEBUG => $FORM{DEBUG} } );

  if ( $xml_output ){
    $FORM{xml} = 1;
  }

  return 1;
}

#**********************************************************
=head2 dhcphosts_reconfigure($attr) - DHCP server reconfigure

=cut
#**********************************************************
sub dhcphosts_reconfigure{
  my ($attr) = @_;

  my $debug = $attr->{DEBUG} || 0;

  if ( $conf{DHCPHOSTS_RECONFIGURE} ){
    if ( -e "/usr/local/etc/rc.d/ipguard.sh" || -e "$var_dir/ipguard" ){
      dhcphosts_mac_block_make() if (!$AUTH{dhcp});
    }
    my $res = cmd( $conf{DHCPHOSTS_RECONFIGURE},
      { PARAMS  => { %FORM, %{$attr}, },
        SET_ENV => 1
      } );
    print $res if ($debug > 2);
  }
  else{
    if ( $debug > 0 ){
      print $html->message( 'err', $lang{ERROR}, "Can't find reconfiguration command " . '"$conf{DHCPHOSTS_RECONFIGURE}"' );
    }
  }

  return 0;
}

#**********************************************************
=head2 convert_ip($cid, $blocked

=cut
#**********************************************************
sub convert_ip {
  my ($cid, $blocked) = @_;

  #if ( !$Dhcphosts->{NETWORK} ){
  #  $Dhcphosts->network_info( $net_id );
  #}

  my @ip = split( /\./, $cid );
  my @ip2 = ();
  if ( $blocked ){
    @ip2 = split( /\./, $Dhcphosts->{BLOCK_NETWORK} );
  }
  else{
    @ip2 = split( /\./, $Dhcphosts->{NETWORK} );
  }

  return "$ip2[0].$ip2[1].$ip2[2].$ip[3]";
}

#**********************************************************
=head2 mask2bitlen($netmask) - Get bit count from net mask

=cut
#**********************************************************
sub mask2bitlen{
  my ($netmask) = @_;

  my @mask = split( /\./, $netmask, 4 );
  my $bitlen = 0;
  foreach my $line ( @mask ){
    my $bits = sprintf( "%b", $line );
    $bits =~ s/0//g;
    $bitlen += length( $bits );
  }

  return $bitlen;
}

#**********************************************************
=head2 make_classless_option
 http://rfc3442svc.sourceforge.net/isc-dhcpd-configuration.html

 For isc-dhcpd
  dhcpd.conf

  option classless-route code 121 = string;
  option classless-route-xp code 249 = string;
  option classless-route  16:0a:0b:00:c0:a8:32:01:14:c0:a8:50:c0:a8:32:01:17:c0:a8:5a:c0:a8:32:01:20:0a:0a:0a:0a:c0:a8:32:02:14:c0:a8:00:c0:a8:32:01;
  option classless-route-xp 16:0a:0b:00:c0:a8:32:01:14:c0:a8:50:c0:a8:32:01:17:c0:a8:5a:c0:a8:32:01:20:0a:0a:0a:0a:c0:a8:32:02:14:c0:a8:00:c0:a8:32:01;

=cut
#**********************************************************
sub make_classless_option{
  my $routes = shift;
  my ($s1, $s2, $s3, $s4, $len, @bytes, $net, $mask, $destination, $router);

  $len = 2;
  @bytes = ();
  foreach my $destination_ ( keys %{$routes} ){
    ($net, $mask) = split( '/', $destination_ );
    $router = $routes->{$destination};
    ($s1, $s2, $s3, $s4) = split( /\./, $net );
    push( @bytes, sprintf( '%02x', $mask ) );
    push( @bytes, sprintf( '%02x', $s1 ) );
    push( @bytes, sprintf( '%02x', $s2 ) ) if ($mask > 8);
    push( @bytes, sprintf( '%02x', $s3 ) ) if ($mask > 16);
    push( @bytes, sprintf( '%02x', $s4 ) ) if ($mask > 24);
    ($s1, $s2, $s3, $s4) = split( /\./, $router );
    push( @bytes, sprintf( '%02x', $s1 ) );
    push( @bytes, sprintf( '%02x', $s2 ) );
    push( @bytes, sprintf( '%02x', $s3 ) );
    push( @bytes, sprintf( '%02x', $s4 ) );
  }

  return join( ':', @bytes );
}

#**********************************************************
=head2 auto_net_sign($ip)

=cut
#**********************************************************
sub auto_net_sign{
  my ($ip) = @_;

  my %network_hash = ();

  my $list = $Dhcphosts->networks_list( {
    IP_RANGE_FIRST => 1,
    COLS_NAME      => 1,
    PAGE_ROWS      => 10000
  } );

  $ip = ip2int( $ip );

  foreach my $line ( @{$list} ){
    my $first_ip = ip2int( $line->{ip_range_first} );
    my $last_ip = $first_ip + (4294967295 - ip2int( $line->{ip_range_last} ));
    $network_hash{$first_ip} = "$last_ip:$line->{id}";
  }

  while (my ($first, $v) = each %network_hash) {
    my ($last, $id) = split( /:/, $v, 2 );
    if ( $ip >= $first && $ip <= $last ){
      return $id;
    }
  }

  return 0;
}

#**********************************************************
=head2 dhcphosts_log_clean()

=cut
#**********************************************************
sub dhcphosts_log_clean{
  $Dhcphosts->log_del( { DAYS_OLD => $conf{DHCPHOSTS_LOG_CLEAN_DAYS} || 30 } );
}

#**********************************************************
=head2 dhcphosts_log()

=cut
#**********************************************************
sub dhcphosts_log{

  my %DHCP_MESSAGE_TYPES = (
    DHCPDISCOVER        => 1,
    DHCPOFFER           => 2,
    DHCPREQUEST         => 3,
    DHCPDECLINE         => 4,
    DHCPACK             => 5,
    DHCPNAK             => 6,
    DHCPRELEASE         => 7,
    DHCPINFORM          => 8,
    DHCPLEASEQUERY      => 10,
    DHCPLEASEUNASSIGNED => 11,
    DHCPLEASEUNKNOWN    => 12,
    DHCPLEASEACTIVE     => 13
  );

  my %DHCP_MESSAGE_TYPES_REV = reverse %DHCP_MESSAGE_TYPES;

  if ( !$FORM{sort} ){
    $LIST_PARAMS{SORT} = 1;
    $LIST_PARAMS{DESC} = 'desc';
  }

  $Dhcphosts->{MESSAGE_TYPE_SEL} = $html->form_select(
    'MESSAGE_TYPE',
    {
      SELECTED => $FORM{MESSAGE_TYPE} || '',
      SEL_HASH => {
        '' => $lang{ALL},
        %DHCP_MESSAGE_TYPES_REV
      },
      NO_ID    => 1
    }
  ),

    form_search( { SEARCH_FORM => $html->tpl_show( _include( 'dhcphosts_log_search', 'Dhcphosts' ),
        { %FORM, %{$Dhcphosts} },
        { OUTPUT2RETURN => 1 } )
      } );

  if ( $FORM{search} && $FORM{MESSAGE} ){
    $FORM{MESSAGE} =~ s/\-/:/g;
    $FORM{MESSAGE} =~ s/\*//g;
    push @{ $Dhcphosts->{IDS} }, $FORM{MESSAGE};
  }

  if ( $FORM{MESSAGE_TYPE} ){
    $LIST_PARAMS{MESSAGE_TYPE} = $FORM{MESSAGE_TYPE};
  }

  my $list = $Dhcphosts->log_list( { %LIST_PARAMS, COLS_NAME => 1 } );

  my $table = $html->table(
    {
      width      => '100%',
      caption    => "$lang{LOG}",
      title      => [ "$lang{DATE} $lang{TIME}", "HOSTNAME", "$lang{MESSAGE} $lang{TYPE}", $lang{MESSAGE}, "-" ],
      ID         => 'DHCP_LOG',
      qs         => $pages_qs,
      pages      => $Dhcphosts->{TOTAL},
    }
  );

  foreach my $line ( @{$list} ){
    $table->addrow( $line->{datetime},
      $line->{hostname},
      ( $line->{message_type} && $DHCP_MESSAGE_TYPES_REV{ $line->{message_type} }) ? $DHCP_MESSAGE_TYPES_REV{ $line->{message_type} } : ($line->{message_type} || q{}),
      color_marks( $line->{message}, $Dhcphosts->{IDS} )
    );
  }
  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      rows       => [ [ "$lang{TOTAL}:", $html->b( $Dhcphosts->{TOTAL} ) ] ]
    }
  );
  print $table->show();

  return 1;
}


#**********************************************************
=head2 color_marks($message, $ids)

=cut
#**********************************************************
sub color_marks{
  my ($message, $ids) = @_;

  foreach my $id ( @{$ids} ){
    if($id) {
      my $replace = $html->b( $id );
      $message =~ s/\s+$id\s+/ $replace /g;
    }
  }

  return $message;
}

#**********************************************************
=head2 dhcphosts_payments_maked()

=cut
#**********************************************************
sub dhcphosts_payments_maked{
  my ($attr) = @_;
  #my $deposit = $attr->{USER_INFO}->{DEPOSIT} + $attr->{USER_INFO}->{CREDIT};

  my %NETWORKS = ();
  my %NAS_IDS = ();

  my $list = $Dhcphosts->hosts_list( {
    UID       => $attr->{USER_INFO}->{UID},
    STATUS    => 0,
    NAS_ID    => '>0',
    COLS_NAME => 1
  } );

  foreach my $line ( @{$list} ){
    $NETWORKS{ $line->{network_id} } = 1;
    $NAS_IDS{ $line->{nas_id} } = 1;
  }

  if ( in_array( 'Snmputils', \@MODULES ) ){
    if ( scalar( keys %NAS_IDS ) > 0 ){
      load_module( 'Snmputils' );

      my $return = snmputils_periodic( { NAS_IDS => join( ',', keys %NAS_IDS ), DEBUG => 0 } );

      if ( $return ne '' && !$attr->{QUITE} ){
        $html->message( 'info', "SNMP", $html->pre( $return, { OUTPUT2RETURN => 1 } ) );
      }
    }
  }
  if ( scalar( keys %NETWORKS ) > 0 ){
    dhcphosts_config(
      {
        NETWORKS   => join( ',', keys %NETWORKS ),
          reconfig => 1,
          %{$attr}
      }
    );
  }

  return 1;
}

#**********************************************************
=head2 dhcphosts_o82_info()

=cut
#**********************************************************
sub dhcphosts_o82_info{
  my ($attr) = @_;
  my ($nas_id, $port, $vlan, $nas_mac) = (0, 0, 0, '');

  if ( $attr->{CIRCUIT_ID} =~ /0:4:0:([0-9a-f]+):0:([0-9a-f]+)/i ){
    $vlan = hex( $1 );
    $port = hex( $2 );
  }

  if ( $attr->{REMOTE_ID} =~ /0:6:([0-9a-f]{1,2}:[0-9a-f]{1,2}:[0-9a-f]{1,2}:[0-9a-f]{1,2}:[0-9a-f]{1,2}:[0-9a-f]{1,2})/i ){
    $nas_mac = $1;
    if ( $nas_mac ){
      my $list = $Nas->list( {
        MAC       => $nas_mac,
        SHORT     => 1,
        COLS_NAME => 1
      });

      if ( $Nas->{TOTAL} > 0 ){
        $nas_id = $list->[0]->{id};
      }
    }
  }

  return $nas_id, $port, $vlan, $nas_mac;
}

1
