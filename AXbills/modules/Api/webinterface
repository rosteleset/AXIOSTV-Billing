#!/usr/bin/perl
=head1 NAME

 Api report of API requests

=cut

use strict;
use warnings FATAL => 'all';
use JSON qw(decode_json);
use AXbills::Base qw(convert);

use Api;

our (
  $db,
  $admin,
  %conf,
  %lang,
  $html,
);

use constant {
  MAX_INLINE_RESPONSE_LENGTH => 192
};

my $Api = Api->new($db, $admin, \%conf);

#**********************************************************
=head2 api_log_list()

  Print logs of API

=cut
#**********************************************************
sub api_log_list {
  my ($table, undef) = result_former({
    INPUT_DATA      => $Api,
    FUNCTION        => 'list',
    BASE_FIELDS     => 0,
    DEFAULT_FIELDS  => 'ID,REQUEST_URL,REQUEST_BODY,HTTP_STATUS,RESPONSE,HTTP_METHOD,DATE,RESPONSE_TIME',
    SELECT_VALUE    => {
      http_status => {}
    },
    FILTER_VALUES => {
      response        => \&_api_filter_response,
      request_body    => \&_api_filter_response,
      request_headers => \&_api_filter_request_headers
    },
    EXT_TITLES => {
      id              => 'id',
      aid             => 'aid',
      uid             => 'uid',
      sid             => 'sid',
      request_url     => 'request_url',
      request_body    => 'request_body',
      request_headers => 'request_headers',
      response_time   => 'response_time',
      response        => 'response',
      http_status     => 'http_status',
      http_method     => 'http_method',
      date            => 'date',
      ip              => 'ip',
      error_msg       => 'error_msg',
    },
    SKIP_USER_TITLE => 1,
    TABLE           => {
      width   => '100%',
      caption => $lang{API_LOGS},
      qs      => $pages_qs,
      ID      => 'API_LOG',
      pages   => $Api->{TOTAL},
      MENU    => "$lang{SEARCH}:index=$index&search_form=1:search;",
      EXPORT  => 1,
    },
    MAKE_ROWS       => 1,
    MODULE          => 'Api'
  });

  return print $table->show();
}

#**********************************************************
=head2 _api_filter_response($res) - response filter for result former

=cut
#**********************************************************
sub _api_filter_response {
  my ($res) = @_;
  my $res_length = length($res);

  $res = convert($res, { text2html => 1 }) if ($res_length);

  if ($res && $res_length > MAX_INLINE_RESPONSE_LENGTH) {
    my $table = $html->table({
      ID         => 'API_REQUEST_BODY_' . rand(1000000),
      caption    => "Response: $res_length B",
      width      => '100%',
      HIDE_TABLE => 1,
    });
    $table->addrow($res);
    return $table->show();
  }
  return $res;
}

#**********************************************************
=head2 _api_filter_request_headers($headers) - headers filter for result former

=cut
#**********************************************************
sub _api_filter_request_headers {
  my ($headers) = @_;
  my $headers_length = length($headers);

  if ($headers_length) {
    my $decoded_headers = eval { decode_json($headers) };
    if ($@) {
      return $lang{ERROR};
    }
    my $table = $html->table({
      ID         => 'API_REQUEST_BODY_' . rand(1000000),
      caption    => "Headers: $headers_length B",
      width      => '100%',
      HIDE_TABLE => 1,
    });

    foreach my $header (sort keys %$decoded_headers) {
      $table->addrow(
        convert($header, { text2html => 1 }),
        convert($decoded_headers->{$header}, { text2html => 1 }),
      )
    }
    return $table->show();
  }
  return $headers;
}

1;
